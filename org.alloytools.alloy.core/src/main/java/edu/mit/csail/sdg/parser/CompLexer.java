/* The following code was generated by JFlex 1.7.0 */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */


public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\100\1\101\1\64\1\65\1\66\1\64\16\100\4\0\1\101\1\1"+
    "\1\62\1\2\1\77\1\0\1\3\1\70\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\71\1\74\10\75\1\15\1\0\1\16"+
    "\1\17\1\12\1\0\1\20\6\73\2\77\1\56\11\77\1\61\7\77"+
    "\1\21\1\63\1\22\1\23\1\72\1\0\1\30\1\31\1\35\1\40"+
    "\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50\1\37"+
    "\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\77\1\51"+
    "\1\52\1\77\1\24\1\25\1\26\1\27\6\100\1\67\32\100\2\0"+
    "\4\76\4\0\1\76\2\0\1\100\7\0\1\76\4\0\1\76\5\0"+
    "\27\76\1\0\37\76\1\0\u01ca\76\4\0\14\76\16\0\5\76\7\0"+
    "\1\76\1\0\1\76\21\0\160\100\5\76\1\0\2\76\2\0\4\76"+
    "\10\0\1\76\1\0\3\76\1\0\1\76\1\0\24\76\1\0\123\76"+
    "\1\0\213\76\1\0\5\100\2\0\236\76\11\0\46\76\2\0\1\76"+
    "\7\0\47\76\7\0\1\76\1\0\55\100\1\0\1\100\1\0\2\100"+
    "\1\0\2\100\1\0\1\100\10\0\33\76\5\0\3\76\15\0\5\100"+
    "\6\0\1\76\4\0\13\100\5\0\53\76\37\100\4\0\2\76\1\100"+
    "\143\76\1\0\1\76\10\100\1\0\6\100\2\76\2\100\1\0\4\100"+
    "\2\76\12\100\3\76\2\0\1\76\17\0\1\100\1\76\1\100\36\76"+
    "\33\100\2\0\131\76\13\100\1\76\16\0\12\100\41\76\11\100\2\76"+
    "\4\0\1\76\5\0\26\76\4\100\1\76\11\100\1\76\3\100\1\76"+
    "\5\100\22\0\31\76\3\100\104\0\1\76\1\0\13\76\67\0\33\100"+
    "\1\0\4\100\66\76\3\100\1\76\22\100\1\76\7\100\12\76\2\100"+
    "\2\0\12\100\1\0\7\76\1\0\7\76\1\0\3\100\1\0\10\76"+
    "\2\0\2\76\2\0\26\76\1\0\7\76\1\0\1\76\3\0\4\76"+
    "\2\0\1\100\1\76\7\100\2\0\2\100\2\0\3\100\1\76\10\0"+
    "\1\100\4\0\2\76\1\0\3\76\2\100\2\0\12\100\4\76\7\0"+
    "\1\76\5\0\3\100\1\0\6\76\4\0\2\76\2\0\26\76\1\0"+
    "\7\76\1\0\2\76\1\0\2\76\1\0\2\76\2\0\1\100\1\0"+
    "\5\100\4\0\2\100\2\0\3\100\3\0\1\100\7\0\4\76\1\0"+
    "\1\76\7\0\14\100\3\76\1\100\13\0\3\100\1\0\11\76\1\0"+
    "\3\76\1\0\26\76\1\0\7\76\1\0\2\76\1\0\5\76\2\0"+
    "\1\100\1\76\10\100\1\0\3\100\1\0\3\100\2\0\1\76\17\0"+
    "\2\76\2\100\2\0\12\100\1\0\1\76\17\0\3\100\1\0\10\76"+
    "\2\0\2\76\2\0\26\76\1\0\7\76\1\0\2\76\1\0\5\76"+
    "\2\0\1\100\1\76\7\100\2\0\2\100\2\0\3\100\10\0\2\100"+
    "\4\0\2\76\1\0\3\76\2\100\2\0\12\100\1\0\1\76\20\0"+
    "\1\100\1\76\1\0\6\76\3\0\3\76\1\0\4\76\3\0\2\76"+
    "\1\0\1\76\1\0\2\76\3\0\2\76\3\0\3\76\3\0\14\76"+
    "\4\0\5\100\3\0\3\100\1\0\4\100\2\0\1\76\6\0\1\100"+
    "\16\0\12\100\11\0\1\76\7\0\3\100\1\0\10\76\1\0\3\76"+
    "\1\0\27\76\1\0\12\76\1\0\5\76\3\0\1\76\7\100\1\0"+
    "\3\100\1\0\4\100\7\0\2\100\1\0\2\76\6\0\2\76\2\100"+
    "\2\0\12\100\22\0\2\100\1\0\10\76\1\0\3\76\1\0\27\76"+
    "\1\0\12\76\1\0\5\76\2\0\1\100\1\76\7\100\1\0\3\100"+
    "\1\0\4\100\7\0\2\100\7\0\1\76\1\0\2\76\2\100\2\0"+
    "\12\100\1\0\2\76\17\0\2\100\1\0\10\76\1\0\3\76\1\0"+
    "\51\76\2\0\1\76\7\100\1\0\3\100\1\0\4\100\1\76\10\0"+
    "\1\100\10\0\2\76\2\100\2\0\12\100\12\0\6\76\2\0\2\100"+
    "\1\0\22\76\3\0\30\76\1\0\11\76\1\0\1\76\2\0\7\76"+
    "\3\0\1\100\4\0\6\100\1\0\1\100\1\0\10\100\22\0\2\100"+
    "\15\0\60\76\1\100\2\76\7\100\4\0\10\76\10\100\1\0\12\100"+
    "\47\0\2\76\1\0\1\76\2\0\2\76\1\0\1\76\2\0\1\76"+
    "\6\0\4\76\1\0\7\76\1\0\3\76\1\0\1\76\1\0\1\76"+
    "\2\0\2\76\1\0\4\76\1\100\2\76\6\100\1\0\2\100\1\76"+
    "\2\0\5\76\1\0\1\76\1\0\6\100\2\0\12\100\2\0\4\76"+
    "\40\0\1\76\27\0\2\100\6\0\12\100\13\0\1\100\1\0\1\100"+
    "\1\0\1\100\4\0\2\100\10\76\1\0\44\76\4\0\24\100\1\0"+
    "\2\100\5\76\13\100\1\0\44\100\11\0\1\100\71\0\53\76\24\100"+
    "\1\76\12\100\6\0\6\76\4\100\4\76\3\100\1\76\3\100\2\76"+
    "\7\100\3\76\4\100\15\76\14\100\1\76\17\100\2\0\46\76\1\0"+
    "\1\76\5\0\1\76\2\0\53\76\1\0\u014d\76\1\0\4\76\2\0"+
    "\7\76\1\0\1\76\1\0\4\76\2\0\51\76\1\0\4\76\2\0"+
    "\41\76\1\0\4\76\2\0\7\76\1\0\1\76\1\0\4\76\2\0"+
    "\17\76\1\0\71\76\1\0\4\76\2\0\103\76\2\0\3\100\40\0"+
    "\20\76\20\0\125\76\14\0\u026c\76\2\0\21\76\1\0\32\76\5\0"+
    "\113\76\3\0\3\76\17\0\15\76\1\0\4\76\3\100\13\0\22\76"+
    "\3\100\13\0\22\76\2\100\14\0\15\76\1\0\3\76\1\0\2\100"+
    "\14\0\64\76\40\100\3\0\1\76\3\0\2\76\1\100\2\0\12\100"+
    "\41\0\3\100\2\0\12\100\6\0\130\76\10\0\51\76\1\100\1\76"+
    "\5\0\106\76\12\0\35\76\3\0\14\100\4\0\14\100\12\0\12\100"+
    "\36\76\2\0\5\76\13\0\54\76\4\0\21\100\7\76\2\100\6\0"+
    "\12\100\46\0\27\76\5\100\4\0\65\76\12\100\1\0\35\100\2\0"+
    "\13\100\6\0\12\100\15\0\1\76\130\0\5\100\57\76\21\100\7\76"+
    "\4\0\12\100\21\0\11\100\14\0\3\100\36\76\15\100\2\76\12\100"+
    "\54\76\16\100\14\0\44\76\24\100\10\0\12\100\3\0\3\76\12\100"+
    "\44\76\122\0\3\100\1\0\25\100\4\76\1\100\4\76\3\100\2\76"+
    "\11\0\300\76\47\100\25\0\4\100\u0116\76\2\0\6\76\2\0\46\76"+
    "\2\0\6\76\2\0\10\76\1\0\1\76\1\0\1\76\1\0\1\76"+
    "\1\0\37\76\2\0\65\76\1\0\7\76\1\0\1\76\3\0\3\76"+
    "\1\0\7\76\3\0\4\76\2\0\6\76\4\0\15\76\5\0\3\76"+
    "\1\0\7\76\16\0\5\100\30\0\1\65\1\65\5\100\20\0\2\76"+
    "\23\0\1\76\13\0\5\100\5\0\6\100\1\0\1\76\15\0\1\76"+
    "\20\0\15\76\3\0\33\76\25\0\15\100\4\0\1\100\3\0\14\100"+
    "\21\0\1\76\4\0\1\76\2\0\12\76\1\0\1\76\3\0\5\76"+
    "\6\0\1\76\1\0\1\76\1\0\1\76\1\0\4\76\1\0\13\76"+
    "\2\0\4\76\5\0\5\76\4\0\1\76\21\0\51\76\u0a77\0\57\76"+
    "\1\0\57\76\1\0\205\76\6\0\4\76\3\100\2\76\14\0\46\76"+
    "\1\0\1\76\5\0\1\76\2\0\70\76\7\0\1\76\17\0\1\100"+
    "\27\76\11\0\7\76\1\0\7\76\1\0\7\76\1\0\7\76\1\0"+
    "\7\76\1\0\7\76\1\0\7\76\1\0\7\76\1\0\40\100\57\0"+
    "\1\76\u01d5\0\3\76\31\0\11\76\6\100\1\0\5\76\2\0\5\76"+
    "\4\0\126\76\2\0\2\100\2\0\3\76\1\0\132\76\1\0\4\76"+
    "\5\0\51\76\3\0\136\76\21\0\33\76\65\0\20\76\u0200\0\u19b6\76"+
    "\112\0\u51cd\76\63\0\u048d\76\103\0\56\76\2\0\u010d\76\3\0\20\76"+
    "\12\100\2\76\24\0\57\76\1\100\4\0\12\100\1\0\31\76\7\0"+
    "\1\100\120\76\2\100\45\0\11\76\2\0\147\76\2\0\4\76\1\0"+
    "\4\76\14\0\13\76\115\0\12\76\1\100\3\76\1\100\4\76\1\100"+
    "\27\76\5\100\20\0\1\76\7\0\64\76\14\0\2\100\62\76\21\100"+
    "\13\0\12\100\6\0\22\100\6\76\3\0\1\76\4\0\12\100\34\76"+
    "\10\100\2\0\27\76\15\100\14\0\35\76\3\0\4\100\57\76\16\100"+
    "\16\0\1\76\12\100\46\0\51\76\16\100\11\0\3\76\1\100\10\76"+
    "\2\100\2\0\12\100\6\0\27\76\3\0\1\76\1\100\4\0\60\76"+
    "\1\100\1\76\3\100\2\76\2\100\5\76\2\100\1\76\1\100\1\76"+
    "\30\0\3\76\2\0\13\76\5\100\2\0\3\76\2\100\12\0\6\76"+
    "\2\0\6\76\2\0\6\76\11\0\7\76\1\0\7\76\221\0\43\76"+
    "\10\100\1\0\2\100\2\0\12\100\6\0\u2ba4\76\14\0\27\76\4\0"+
    "\61\76\u2104\0\u016e\76\2\0\152\76\46\0\7\76\14\0\5\76\5\0"+
    "\1\76\1\100\12\76\1\0\15\76\1\0\5\76\1\0\1\76\1\0"+
    "\2\76\1\0\2\76\1\0\154\76\41\0\u016b\76\22\0\100\76\2\0"+
    "\66\76\50\0\15\76\3\0\20\100\20\0\7\100\14\0\2\76\30\0"+
    "\3\76\31\0\1\76\6\0\5\76\1\0\207\76\2\0\1\100\4\0"+
    "\1\76\13\0\12\100\7\0\32\76\4\0\1\76\1\0\32\76\13\0"+
    "\131\76\3\0\6\76\2\0\6\76\2\0\6\76\2\0\3\76\3\0"+
    "\2\76\3\0\2\76\22\0\3\100\4\0\14\76\1\0\32\76\1\0"+
    "\23\76\1\0\2\76\1\0\17\76\2\0\16\76\42\0\173\76\105\0"+
    "\65\76\210\0\1\100\202\0\35\76\3\0\61\76\57\0\37\76\21\0"+
    "\33\76\65\0\36\76\2\0\44\76\4\0\10\76\1\0\5\76\52\0"+
    "\236\76\2\0\12\100\u0356\0\6\76\2\0\1\76\1\0\54\76\1\0"+
    "\2\76\3\0\1\76\2\0\27\76\252\0\26\76\12\0\32\76\106\0"+
    "\70\76\6\0\2\76\100\0\1\76\3\100\1\0\2\100\5\0\4\100"+
    "\4\76\1\0\3\76\1\0\33\76\4\0\3\100\4\0\1\100\40\0"+
    "\35\76\203\0\66\76\12\0\26\76\12\0\23\76\215\0\111\76\u03b7\0"+
    "\3\100\65\76\17\100\37\0\12\100\20\0\3\100\55\76\13\100\2\0"+
    "\1\100\22\0\31\76\7\0\12\100\6\0\3\100\44\76\16\100\1\0"+
    "\12\100\100\0\3\100\60\76\16\100\4\76\13\0\12\100\u04a6\0\53\76"+
    "\15\100\10\0\12\100\u0936\0\u036f\76\221\0\143\76\u0b9d\0\u042f\76\u33d1\0"+
    "\u0239\76\u04c7\0\105\76\13\0\1\76\56\100\20\0\4\100\15\76\u4060\0"+
    "\2\76\u2163\0\5\100\3\0\26\100\2\0\7\100\36\0\4\100\224\0"+
    "\3\100\u01bb\0\125\76\1\0\107\76\1\0\2\76\2\0\1\76\2\0"+
    "\2\76\2\0\4\76\1\0\14\76\1\0\1\76\1\0\7\76\1\0"+
    "\101\76\1\0\4\76\2\0\10\76\1\0\7\76\1\0\34\76\1\0"+
    "\4\76\1\0\5\76\1\0\1\76\3\0\7\76\1\0\u0154\76\2\0"+
    "\31\76\1\0\31\76\1\0\37\76\1\0\31\76\1\0\37\76\1\0"+
    "\31\76\1\0\37\76\1\0\31\76\1\0\37\76\1\0\31\76\1\0"+
    "\10\76\2\0\62\100\u1600\0\4\76\1\0\33\76\1\0\2\76\1\0"+
    "\1\76\2\0\1\76\1\0\12\76\1\0\4\76\1\0\1\76\1\0"+
    "\1\76\6\0\1\76\4\0\1\76\1\0\1\76\1\0\1\76\1\0"+
    "\3\76\1\0\2\76\1\0\1\76\2\0\1\76\1\0\1\76\1\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\2\76\1\0\1\76\2\0"+
    "\4\76\1\0\7\76\1\0\4\76\1\0\4\76\1\0\1\76\1\0"+
    "\12\76\1\0\21\76\5\0\3\76\1\0\5\76\1\0\21\76\u1144\0"+
    "\ua6d7\76\51\0\u1035\76\13\0\336\76\u3fe2\0\u021e\76\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\100\36\0\140\100\200\0\360\100\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\23\31\1\32\1\33\2\34\1\35\1\36\1\33"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\45\1\47\1\31\1\50\14\31\1\51\5\31"+
    "\1\52\3\31\1\47\14\31\1\53\1\0\3\54\1\55"+
    "\2\0\1\56\2\31\1\57\1\35\1\60\1\61\1\62"+
    "\1\63\1\64\2\31\1\65\1\31\1\66\1\31\1\2"+
    "\6\31\1\67\2\31\1\70\2\31\1\56\1\71\10\31"+
    "\1\72\1\73\1\74\1\31\1\75\1\76\1\54\1\77"+
    "\1\0\1\33\2\31\1\100\1\101\1\31\1\102\1\103"+
    "\1\104\1\105\1\106\4\31\1\107\1\110\1\31\1\111"+
    "\3\31\1\112\1\113\1\31\1\114\3\31\1\115\15\31"+
    "\1\116\4\31\1\117\3\31\1\120\2\31\1\121\2\31"+
    "\1\122\1\123\1\31\1\46\1\124\1\125\1\31\1\126"+
    "\1\127\1\104\3\31\1\112\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\102\0\204\0\102\0\102\0\102"+
    "\0\306\0\102\0\u0108\0\u014a\0\102\0\u018c\0\u01ce\0\u0210"+
    "\0\u0252\0\102\0\102\0\102\0\102\0\102\0\u0294\0\102"+
    "\0\102\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102\0\u07fe\0\u0840"+
    "\0\102\0\102\0\u0882\0\102\0\u08c4\0\102\0\u0906\0\102"+
    "\0\102\0\102\0\u0948\0\102\0\102\0\102\0\u098a\0\u09cc"+
    "\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u05ac\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\102\0\u141c\0\u145e\0\102\0\u14a0\0\u14e2\0\u05ac\0\u05ac"+
    "\0\u05ac\0\u05ac\0\u05ac\0\u05ac\0\u05ac\0\u1524\0\u1566\0\u05ac"+
    "\0\u15a8\0\u05ac\0\u15ea\0\u05ac\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u05ac\0\u187e\0\u18c0"+
    "\0\u05ac\0\u05ac\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u05ac\0\u05ac\0\u05ac\0\u1b12\0\u12d2\0\u1398"+
    "\0\u1b54\0\u13da\0\u1b96\0\u141c\0\u1bd8\0\u1c1a\0\u05ac\0\u05ac"+
    "\0\u1c5c\0\u05ac\0\u05ac\0\u1c9e\0\u05ac\0\u05ac\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u05ac\0\u05ac\0\u1de8\0\u05ac\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u05ac\0\u1f32\0\u05ac\0\u1f74\0\u1fb6\0\u1ff8"+
    "\0\u05ac\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u05ac\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u05ac\0\u249c\0\u24de\0\u2520\0\u05ac"+
    "\0\u2562\0\u25a4\0\u05ac\0\u25e6\0\u2628\0\u05ac\0\u05ac\0\u266a"+
    "\0\u05ac\0\u05ac\0\u05ac\0\u26ac\0\u05ac\0\u05ac\0\u05ac\0\u26ee"+
    "\0\u2730\0\u2772\0\u05ac\0\u05ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\45\1\46\1\45\1\47\1\50"+
    "\3\45\1\51\1\52\1\53\2\45\1\54\1\55\1\2"+
    "\1\56\1\0\1\56\1\0\1\2\1\57\2\45\2\60"+
    "\2\45\1\2\1\56\105\0\1\61\105\0\1\62\103\0"+
    "\1\63\1\64\101\0\1\65\4\0\1\66\70\0\1\67"+
    "\5\0\1\63\77\0\1\70\2\0\1\15\101\0\1\71"+
    "\1\72\1\73\74\0\1\74\3\0\1\75\110\0\1\76"+
    "\104\0\1\45\1\77\1\100\3\45\1\101\1\102\23\45"+
    "\4\0\12\45\31\0\12\45\1\103\20\45\4\0\12\45"+
    "\31\0\11\45\1\104\1\105\2\45\1\106\1\45\1\107"+
    "\13\45\4\0\12\45\31\0\13\45\1\110\17\45\4\0"+
    "\12\45\31\0\12\45\1\111\20\45\4\0\12\45\31\0"+
    "\13\45\1\112\17\45\4\0\12\45\31\0\11\45\1\113"+
    "\5\45\1\114\13\45\4\0\12\45\31\0\17\45\1\115"+
    "\13\45\4\0\12\45\31\0\15\45\1\116\15\45\4\0"+
    "\12\45\31\0\6\45\1\117\1\120\11\45\1\121\11\45"+
    "\4\0\12\45\31\0\7\45\1\122\23\45\4\0\12\45"+
    "\31\0\33\45\4\0\12\45\31\0\7\45\1\123\1\124"+
    "\7\45\1\125\4\45\1\126\5\45\4\0\12\45\31\0"+
    "\4\45\1\127\2\45\1\130\14\45\1\131\6\45\4\0"+
    "\12\45\31\0\1\132\14\45\1\133\1\45\1\134\13\45"+
    "\4\0\12\45\31\0\1\135\3\45\1\136\26\45\4\0"+
    "\12\45\31\0\1\137\11\45\1\140\4\45\1\141\13\45"+
    "\4\0\12\45\31\0\7\45\1\142\23\45\4\0\12\45"+
    "\31\0\3\45\1\143\27\45\4\0\12\45\1\0\62\55"+
    "\1\144\1\145\16\55\30\0\1\146\1\147\17\146\1\150"+
    "\11\146\5\0\1\146\1\60\2\146\2\60\1\0\1\146"+
    "\32\0\33\146\5\0\1\146\1\60\2\146\2\60\1\0"+
    "\1\146\2\0\64\63\1\56\15\63\12\0\1\151\67\0"+
    "\6\152\1\153\73\152\12\0\1\154\117\0\2\45\1\155"+
    "\30\45\4\0\12\45\31\0\2\45\1\156\30\45\4\0"+
    "\12\45\31\0\6\45\1\157\24\45\4\0\12\45\31\0"+
    "\10\45\1\160\22\45\4\0\12\45\31\0\3\45\1\161"+
    "\27\45\4\0\12\45\31\0\3\45\1\162\23\45\1\163"+
    "\3\45\4\0\12\45\31\0\20\45\1\164\12\45\4\0"+
    "\12\45\31\0\30\45\1\165\2\45\4\0\12\45\31\0"+
    "\20\45\1\166\12\45\4\0\12\45\31\0\15\45\1\167"+
    "\15\45\4\0\12\45\31\0\7\45\1\170\23\45\4\0"+
    "\12\45\31\0\11\45\1\171\21\45\4\0\12\45\31\0"+
    "\3\45\1\172\27\45\4\0\12\45\31\0\7\45\1\173"+
    "\23\45\4\0\12\45\31\0\3\45\1\174\3\45\1\175"+
    "\23\45\4\0\12\45\31\0\2\45\1\176\30\45\4\0"+
    "\12\45\31\0\2\45\1\177\30\45\4\0\12\45\31\0"+
    "\12\45\1\200\20\45\4\0\12\45\31\0\1\201\2\45"+
    "\1\202\7\45\1\203\10\45\1\204\6\45\4\0\12\45"+
    "\31\0\15\45\1\205\15\45\4\0\12\45\31\0\3\45"+
    "\1\206\27\45\4\0\12\45\31\0\11\45\1\207\21\45"+
    "\4\0\12\45\31\0\24\45\1\210\6\45\4\0\12\45"+
    "\31\0\25\45\1\211\5\45\4\0\12\45\31\0\11\45"+
    "\1\212\21\45\4\0\12\45\31\0\11\45\1\213\21\45"+
    "\4\0\12\45\31\0\21\45\1\214\11\45\4\0\12\45"+
    "\31\0\7\45\1\215\23\45\4\0\12\45\31\0\10\45"+
    "\1\216\22\45\4\0\12\45\31\0\4\45\1\217\26\45"+
    "\4\0\12\45\31\0\11\45\1\220\3\45\1\221\15\45"+
    "\4\0\12\45\31\0\5\45\1\222\25\45\4\0\12\45"+
    "\31\0\7\45\1\223\23\45\4\0\12\45\31\0\4\45"+
    "\1\224\26\45\4\0\12\45\31\0\3\45\1\225\27\45"+
    "\4\0\12\45\31\0\4\45\1\226\26\45\4\0\12\45"+
    "\31\0\33\227\5\0\6\227\1\0\1\227\2\0\64\55"+
    "\4\0\12\55\30\0\33\146\5\0\6\146\1\0\1\146"+
    "\32\0\33\146\5\0\1\146\2\230\1\146\1\230\1\146"+
    "\1\0\1\146\32\0\2\231\3\146\1\231\2\146\2\231"+
    "\13\146\1\231\5\146\5\0\1\146\1\231\1\232\3\231"+
    "\1\0\1\146\2\0\6\152\1\233\101\152\1\233\5\152"+
    "\1\234\65\152\30\0\3\45\1\235\27\45\4\0\12\45"+
    "\31\0\11\45\1\236\21\45\4\0\12\45\31\0\11\45"+
    "\1\237\21\45\4\0\12\45\31\0\2\45\1\240\30\45"+
    "\4\0\12\45\31\0\5\45\1\241\25\45\4\0\12\45"+
    "\31\0\11\45\1\242\21\45\4\0\12\45\31\0\11\45"+
    "\1\243\21\45\4\0\12\45\31\0\16\45\1\244\14\45"+
    "\4\0\12\45\31\0\11\45\1\245\21\45\4\0\12\45"+
    "\31\0\20\45\1\246\12\45\4\0\12\45\31\0\5\45"+
    "\1\247\25\45\4\0\12\45\31\0\11\45\1\250\21\45"+
    "\4\0\12\45\31\0\1\251\32\45\4\0\12\45\31\0"+
    "\11\45\1\252\21\45\4\0\12\45\31\0\23\45\1\253"+
    "\7\45\4\0\12\45\31\0\7\45\1\254\23\45\4\0"+
    "\12\45\31\0\6\45\1\255\24\45\4\0\12\45\31\0"+
    "\7\45\1\256\23\45\4\0\12\45\31\0\2\45\1\257"+
    "\30\45\4\0\12\45\31\0\2\45\1\260\30\45\4\0"+
    "\12\45\31\0\12\45\1\261\20\45\4\0\12\45\31\0"+
    "\3\45\1\262\27\45\4\0\12\45\31\0\10\45\1\263"+
    "\22\45\4\0\12\45\31\0\23\45\1\264\7\45\4\0"+
    "\12\45\31\0\3\45\1\265\27\45\4\0\12\45\31\0"+
    "\15\45\1\266\15\45\4\0\12\45\31\0\2\232\3\146"+
    "\1\232\2\146\2\232\13\146\1\232\5\146\5\0\1\146"+
    "\1\232\1\146\3\232\1\0\1\146\2\0\6\152\1\233"+
    "\5\152\1\56\65\152\30\0\4\45\1\267\26\45\4\0"+
    "\12\45\31\0\4\45\1\270\26\45\4\0\12\45\31\0"+
    "\14\45\1\271\16\45\4\0\12\45\31\0\17\45\1\272"+
    "\13\45\4\0\12\45\31\0\3\45\1\273\27\45\4\0"+
    "\12\45\31\0\7\45\1\274\23\45\4\0\12\45\31\0"+
    "\12\45\1\275\20\45\4\0\12\45\31\0\5\45\1\276"+
    "\25\45\4\0\12\45\31\0\15\45\1\277\15\45\4\0"+
    "\12\45\31\0\17\45\1\300\13\45\4\0\12\45\31\0"+
    "\17\45\1\301\13\45\4\0\12\45\31\0\6\45\1\302"+
    "\24\45\4\0\12\45\31\0\15\45\1\303\15\45\4\0"+
    "\12\45\31\0\1\304\32\45\4\0\12\45\31\0\7\45"+
    "\1\305\23\45\4\0\12\45\31\0\1\306\32\45\4\0"+
    "\12\45\31\0\3\45\1\307\27\45\4\0\12\45\31\0"+
    "\15\45\1\310\15\45\4\0\12\45\31\0\6\45\1\311"+
    "\24\45\4\0\12\45\31\0\10\45\1\312\22\45\4\0"+
    "\12\45\31\0\2\45\1\313\30\45\4\0\12\45\31\0"+
    "\3\45\1\314\27\45\4\0\12\45\31\0\11\45\1\315"+
    "\21\45\4\0\12\45\31\0\20\45\1\316\12\45\4\0"+
    "\12\45\31\0\20\45\1\317\12\45\4\0\12\45\31\0"+
    "\11\45\1\320\21\45\4\0\12\45\31\0\3\45\1\321"+
    "\27\45\4\0\12\45\31\0\3\45\1\322\27\45\4\0"+
    "\12\45\31\0\30\45\1\323\2\45\4\0\12\45\31\0"+
    "\5\45\1\324\25\45\4\0\12\45\31\0\7\45\1\325"+
    "\23\45\4\0\12\45\31\0\22\45\1\326\10\45\4\0"+
    "\12\45\31\0\2\45\1\327\30\45\4\0\12\45\31\0"+
    "\3\45\1\330\27\45\4\0\12\45\31\0\2\45\1\331"+
    "\30\45\4\0\12\45\31\0\11\45\1\332\21\45\4\0"+
    "\12\45\31\0\11\45\1\333\21\45\4\0\12\45\31\0"+
    "\15\45\1\334\15\45\4\0\12\45\31\0\11\45\1\335"+
    "\21\45\4\0\12\45\31\0\3\45\1\336\27\45\4\0"+
    "\12\45\31\0\3\45\1\337\27\45\4\0\12\45\31\0"+
    "\15\45\1\340\15\45\4\0\12\45\31\0\17\45\1\341"+
    "\13\45\4\0\12\45\31\0\23\45\1\342\7\45\4\0"+
    "\12\45\31\0\7\45\1\343\23\45\4\0\12\45\31\0"+
    "\11\45\1\344\21\45\4\0\12\45\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10164];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\24\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\0\3\11\1\1\3\11"+
    "\46\1\1\0\3\1\1\11\2\0\1\11\56\1\1\0"+
    "\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\'' && c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nfour escape sequences: \\\\, \\n, \\\', and \\\"");
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2874) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
            } 
            // fall through
          case 88: break;
          case 2: 
            { return alloy_sym(yytext(), CompSym.NOT         );
            } 
            // fall through
          case 89: break;
          case 3: 
            { return alloy_sym(yytext(), CompSym.HASH        );
            } 
            // fall through
          case 90: break;
          case 4: 
            { return alloy_sym(yytext(), CompSym.AMPERSAND   );
            } 
            // fall through
          case 91: break;
          case 5: 
            { return alloy_sym(yytext(), CompSym.LPAREN      );
            } 
            // fall through
          case 92: break;
          case 6: 
            { return alloy_sym(yytext(), CompSym.RPAREN      );
            } 
            // fall through
          case 93: break;
          case 7: 
            { return alloy_sym(yytext(), CompSym.STAR        );
            } 
            // fall through
          case 94: break;
          case 8: 
            { return alloy_sym(yytext(), CompSym.PLUS        );
            } 
            // fall through
          case 95: break;
          case 9: 
            { return alloy_sym(yytext(), CompSym.COMMA       );
            } 
            // fall through
          case 96: break;
          case 10: 
            { return alloy_sym(yytext(), CompSym.MINUS       );
            } 
            // fall through
          case 97: break;
          case 11: 
            { return alloy_sym(yytext(), CompSym.GT          );
            } 
            // fall through
          case 98: break;
          case 12: 
            { return alloy_sym(yytext(), CompSym.DOT         );
            } 
            // fall through
          case 99: break;
          case 13: 
            { return alloy_sym(yytext(), CompSym.SLASH       );
            } 
            // fall through
          case 100: break;
          case 14: 
            { return alloy_sym(yytext(), CompSym.COLON       );
            } 
            // fall through
          case 101: break;
          case 15: 
            { return alloy_sym(yytext(), CompSym.LT          );
            } 
            // fall through
          case 102: break;
          case 16: 
            { return alloy_sym(yytext(), CompSym.EQUALS      );
            } 
            // fall through
          case 103: break;
          case 17: 
            { return alloy_sym(yytext(), CompSym.AT          );
            } 
            // fall through
          case 104: break;
          case 18: 
            { return alloy_sym(yytext(), CompSym.LBRACKET    );
            } 
            // fall through
          case 105: break;
          case 19: 
            { return alloy_sym(yytext(), CompSym.RBRACKET    );
            } 
            // fall through
          case 106: break;
          case 20: 
            { return alloy_sym(yytext(), CompSym.CARET       );
            } 
            // fall through
          case 107: break;
          case 21: 
            { return alloy_sym(yytext(), CompSym.LBRACE      );
            } 
            // fall through
          case 108: break;
          case 22: 
            { return alloy_sym(yytext(), CompSym.BAR         );
            } 
            // fall through
          case 109: break;
          case 23: 
            { return alloy_sym(yytext(), CompSym.RBRACE      );
            } 
            // fall through
          case 110: break;
          case 24: 
            { return alloy_sym(yytext(), CompSym.TILDE       );
            } 
            // fall through
          case 111: break;
          case 25: 
            { return alloy_id  (yytext());
            } 
            // fall through
          case 112: break;
          case 26: 
            { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
            } 
            // fall through
          case 113: break;
          case 27: 
            { 
            } 
            // fall through
          case 114: break;
          case 28: 
            { return alloy_num (yytext());
            } 
            // fall through
          case 115: break;
          case 29: 
            { return alloy_sym(yytext(), CompSym.AND         );
            } 
            // fall through
          case 116: break;
          case 30: 
            { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
            } 
            // fall through
          case 117: break;
          case 31: 
            { return alloy_sym(yytext(), CompSym.ARROW       );
            } 
            // fall through
          case 118: break;
          case 32: 
            { return alloy_sym(yytext(), CompSym.SHA         );
            } 
            // fall through
          case 119: break;
          case 33: 
            { return alloy_sym(yytext(), CompSym.GTE         );
            } 
            // fall through
          case 120: break;
          case 34: 
            { return alloy_sym(yytext(), CompSym.RANGE       );
            } 
            // fall through
          case 121: break;
          case 35: 
            { return alloy_sym(yytext(), CompSym.DOMAIN      );
            } 
            // fall through
          case 122: break;
          case 36: 
            { return alloy_sym(yytext(), CompSym.SHL         );
            } 
            // fall through
          case 123: break;
          case 37: 
            { return alloy_sym(yytext(), CompSym.LTE         );
            } 
            // fall through
          case 124: break;
          case 38: 
            { return alloy_sym(yytext(), CompSym.IMPLIES     );
            } 
            // fall through
          case 125: break;
          case 39: 
            { return alloy_sym(yytext(), CompSym.OR          );
            } 
            // fall through
          case 126: break;
          case 40: 
            { return alloy_sym(yytext(), CompSym.AS          );
            } 
            // fall through
          case 127: break;
          case 41: 
            { return alloy_sym(yytext(), CompSym.NO          );
            } 
            // fall through
          case 128: break;
          case 42: 
            { return alloy_sym(yytext(), CompSym.IN          );
            } 
            // fall through
          case 129: break;
          case 43: 
            { return alloy_string(yytext());
            } 
            // fall through
          case 130: break;
          case 44: 
            { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
            } 
            // fall through
          case 131: break;
          case 45: 
            { return alloy_sym(yytext(), CompSym.SHR         );
            } 
            // fall through
          case 132: break;
          case 46: 
            { return alloy_sym(yytext(), CompSym.IFF         );
            } 
            // fall through
          case 133: break;
          case 47: 
            { return alloy_sym(yytext(), CompSym.ALL         );
            } 
            // fall through
          case 134: break;
          case 48: 
            { return alloy_sym(yytext(), CompSym.BUT         );
            } 
            // fall through
          case 135: break;
          case 49: 
            { return alloy_sym(yytext(), CompSym.SET         );
            } 
            // fall through
          case 136: break;
          case 50: 
            { return alloy_sym(yytext(), CompSym.SEQ         );
            } 
            // fall through
          case 137: break;
          case 51: 
            { return alloy_sym(yytext(), CompSym.SUM         );
            } 
            // fall through
          case 138: break;
          case 52: 
            { return alloy_sym(yytext(), CompSym.SIG         );
            } 
            // fall through
          case 139: break;
          case 53: 
            { return alloy_sym(yytext(), CompSym.RUN         );
            } 
            // fall through
          case 140: break;
          case 54: 
            { return alloy_sym(yytext(), CompSym.LET         );
            } 
            // fall through
          case 141: break;
          case 55: 
            { return alloy_sym(yytext(), CompSym.EXH         );
            } 
            // fall through
          case 142: break;
          case 56: 
            { return alloy_sym(yytext(), CompSym.INT         );
            } 
            // fall through
          case 143: break;
          case 57: 
            { return alloy_sym(yytext(), CompSym.ONE         );
            } 
            // fall through
          case 144: break;
          case 58: 
            { return alloy_sym(yytext(), CompSym.FUN         );
            } 
            // fall through
          case 145: break;
          case 59: 
            { return alloy_sym(yytext(), CompSym.FOR         );
            } 
            // fall through
          case 146: break;
          case 60: 
            { return alloy_sym(yytext(), CompSym.SIGINT      );
            } 
            // fall through
          case 147: break;
          case 61: 
            { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
            } 
            // fall through
          case 148: break;
          case 62: 
            { return alloy_binarynum (yytext());
            } 
            // fall through
          case 149: break;
          case 63: 
            { return alloy_hexnum (yytext());
            } 
            // fall through
          case 150: break;
          case 64: 
            { return alloy_sym(yytext(), CompSym.SOME        );
            } 
            // fall through
          case 151: break;
          case 65: 
            { return alloy_sym(yytext(), CompSym.THIS        );
            } 
            // fall through
          case 152: break;
          case 66: 
            { return alloy_sym(yytext(), CompSym.LONE        );
            } 
            // fall through
          case 153: break;
          case 67: 
            { return alloy_sym(yytext(), CompSym.NONE        );
            } 
            // fall through
          case 154: break;
          case 68: 
            { return alloy_sym(yytext(), CompSym.DISJ        );
            } 
            // fall through
          case 155: break;
          case 69: 
            { return alloy_sym(yytext(), CompSym.ELSE        );
            } 
            // fall through
          case 156: break;
          case 70: 
            { return alloy_sym(yytext(), CompSym.ENUM        );
            } 
            // fall through
          case 157: break;
          case 71: 
            { return alloy_sym(yytext(), CompSym.UNIV        );
            } 
            // fall through
          case 158: break;
          case 72: 
            { return alloy_sym(yytext(), CompSym.IDEN        );
            } 
            // fall through
          case 159: break;
          case 73: 
            { return alloy_sym(yytext(), CompSym.OPEN        );
            } 
            // fall through
          case 160: break;
          case 74: 
            { return alloy_sym(yytext(), CompSym.PART        );
            } 
            // fall through
          case 161: break;
          case 75: 
            { return alloy_sym(yytext(), CompSym.PRED        );
            } 
            // fall through
          case 162: break;
          case 76: 
            { return alloy_sym(yytext(), CompSym.FACT        );
            } 
            // fall through
          case 163: break;
          case 77: 
            { return alloy_sym(yytext(), CompSym.CHECK       );
            } 
            // fall through
          case 164: break;
          case 78: 
            { return alloy_sym(yytext(), CompSym.ASSERT      );
            } 
            // fall through
          case 165: break;
          case 79: 
            { return alloy_sym(yytext(), CompSym.EXPECT      );
            } 
            // fall through
          case 166: break;
          case 80: 
            { return alloy_sym(yytext(), CompSym.MODULE      );
            } 
            // fall through
          case 167: break;
          case 81: 
            { return alloy_sym(yytext(), CompSym.STRING      );
            } 
            // fall through
          case 168: break;
          case 82: 
            { return alloy_sym(yytext(), CompSym.EXACTLY     );
            } 
            // fall through
          case 169: break;
          case 83: 
            { return alloy_sym(yytext(), CompSym.EXTENDS     );
            } 
            // fall through
          case 170: break;
          case 84: 
            { return alloy_sym(yytext(), CompSym.MAXSOME        );
            } 
            // fall through
          case 171: break;
          case 85: 
            { return alloy_sym(yytext(), CompSym.MINSOME        );
            } 
            // fall through
          case 172: break;
          case 86: 
            { return alloy_sym(yytext(), CompSym.PRIVATE     );
            } 
            // fall through
          case 173: break;
          case 87: 
            { return alloy_sym(yytext(), CompSym.ABSTRACT    );
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
