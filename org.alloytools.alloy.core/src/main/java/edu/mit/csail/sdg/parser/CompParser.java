
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 08 11:57:43 EST 2020
//----------------------------------------------------

package edu.mit.csail.sdg.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import org.alloytools.alloy.core.AlloyCore;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.Attr.AttrType;
import edu.mit.csail.sdg.ast.CommandScope;
import edu.mit.csail.sdg.ast.Decl;
import edu.mit.csail.sdg.ast.Expr;
import edu.mit.csail.sdg.ast.ExprBadJoin;
import edu.mit.csail.sdg.ast.ExprITE;
import edu.mit.csail.sdg.ast.ExprLet;
import edu.mit.csail.sdg.ast.ExprBinary;
import edu.mit.csail.sdg.ast.ExprList;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprQt;
import edu.mit.csail.sdg.ast.ExprUnary;
import edu.mit.csail.sdg.ast.ExprVar;
import edu.mit.csail.sdg.ast.Sig;
import edu.mit.csail.sdg.ast.Sig.PrimSig;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 08 11:57:43 EST 2020
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\002\106\003\000\002\002\004\000\002\107" +
    "\005\000\002\107\010\000\002\107\006\000\002\107\010" +
    "\000\002\107\011\000\002\107\013\000\002\107\011\000" +
    "\002\107\010\000\002\107\006\000\002\107\007\000\002" +
    "\107\007\000\002\107\011\000\002\107\012\000\002\107" +
    "\012\000\002\107\005\000\002\107\006\000\002\107\006" +
    "\000\002\107\005\000\002\107\006\000\002\107\006\000" +
    "\002\107\004\000\002\107\004\000\002\107\004\000\002" +
    "\107\004\000\002\107\004\000\002\107\002\000\002\013" +
    "\003\000\002\013\003\000\002\012\007\000\002\012\006" +
    "\000\002\012\011\000\002\012\010\000\002\012\007\000" +
    "\002\012\006\000\002\012\011\000\002\012\010\000\002" +
    "\027\002\000\002\027\004\000\002\075\004\000\002\075" +
    "\006\000\002\075\004\000\002\075\002\000\002\112\003" +
    "\000\002\112\005\000\002\111\004\000\002\111\004\000" +
    "\002\111\004\000\002\111\004\000\002\111\004\000\002" +
    "\111\004\000\002\111\004\000\002\110\004\000\002\110" +
    "\007\000\002\110\011\000\002\110\006\000\002\110\003" +
    "\000\002\110\006\000\002\110\010\000\002\110\005\000" +
    "\002\051\011\000\002\051\010\000\002\051\011\000\002" +
    "\051\010\000\002\051\006\000\002\052\003\000\002\052" +
    "\004\000\002\037\013\000\002\037\013\000\002\037\010" +
    "\000\002\037\015\000\002\037\015\000\002\037\012\000" +
    "\002\067\011\000\002\067\011\000\002\067\006\000\002" +
    "\067\013\000\002\067\013\000\002\067\010\000\002\123" +
    "\002\000\002\123\003\000\002\076\011\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\101\003\000\002\101\004\000\002" +
    "\077\004\000\002\077\004\000\002\077\004\000\002\077" +
    "\002\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\005\000\002\102\003\000" +
    "\002\104\002\000\002\104\003\000\002\103\003\000\002" +
    "\103\005\000\002\105\003\000\002\105\005\000\002\053" +
    "\003\000\002\053\005\000\002\053\005\000\002\054\003" +
    "\000\002\054\005\000\002\055\003\000\002\055\005\000" +
    "\002\056\003\000\002\056\004\000\002\056\005\000\002" +
    "\056\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\007\000\002\014\006\000\002\014\005" +
    "\000\002\014\007\000\002\014\007\000\002\014\007\000" +
    "\002\014\010\000\002\014\007\000\002\014\006\000\002" +
    "\015\003\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\007\000\002\015\006\000\002\015\005" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\015\010\000\002\015\007\000\002\015\006\000\002" +
    "\020\005\000\002\020\003\000\002\016\005\000\002\016" +
    "\003\000\002\017\002\000\002\017\003\000\002\017\005" +
    "\000\002\017\004\000\002\050\006\000\002\050\007\000" +
    "\002\032\002\000\002\032\003\000\002\031\005\000\002" +
    "\031\004\000\002\033\003\000\002\033\004\000\002\034" +
    "\004\000\002\034\003\000\002\035\002\000\002\035\003" +
    "\000\002\036\003\000\002\036\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\010\000\002\005\005\000\002\005\010" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\063\003\000\002\063\005\000\002\064\003\000\002" +
    "\064\005\000\002\025\003\000\002\025\005\000\002\026" +
    "\003\000\002\026\005\000\002\040\003\000\002\040\003" +
    "\000\002\042\003\000\002\042\007\000\002\044\007\000" +
    "\002\044\005\000\002\042\007\000\002\044\005\000\002" +
    "\041\003\000\002\041\003\000\002\043\003\000\002\043" +
    "\007\000\002\045\007\000\002\045\005\000\002\002\003" +
    "\000\002\002\005\000\002\003\003\000\002\003\005\000" +
    "\002\057\003\000\002\057\004\000\002\057\004\000\002" +
    "\060\003\000\002\060\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\007\000\002\010\004" +
    "\000\002\010\007\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\007\000\002\011\004\000\002\011\007\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\113\003\000\002\113\005\000\002" +
    "\113\005\000\002\113\005\000\002\114\003\000\002\114" +
    "\005\000\002\114\005\000\002\114\005\000\002\117\003" +
    "\000\002\117\005\000\002\117\005\000\002\117\005\000" +
    "\002\117\005\000\002\120\003\000\002\120\005\000\002" +
    "\120\005\000\002\120\005\000\002\120\005\000\002\115" +
    "\003\000\002\115\005\000\002\115\005\000\002\115\005" +
    "\000\002\116\003\000\002\116\005\000\002\116\005\000" +
    "\002\116\005\000\002\061\003\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\062\003\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\065\003\000" +
    "\002\065\005\000\002\066\003\000\002\066\005\000\002" +
    "\046\003\000\002\046\005\000\002\047\003\000\002\047" +
    "\005\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\073\003\000\002\073\005\000\002\074\003\000" +
    "\002\074\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\070\003\000\002\070" +
    "\005\000\002\071\003\000\002\071\005\000\002\006\003" +
    "\000\002\007\003\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\121\004\000\002\121\004\000" +
    "\002\121\004\000\002\121\004\000\002\121\004\000\002" +
    "\121\004\000\002\122\003\000\002\122\004\000\002\122" +
    "\004\000\002\122\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\006\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02f0\000\002\001\uffe6\000\004\002\u02f2\001\002\000" +
    "\034\002\001\035\027\043\011\050\020\065\007\066\017" +
    "\105\006\112\023\126\030\135\013\142\024\150\014\154" +
    "\031\001\uffb1\000\002\001\uffad\000\006\066\u02e3\102\u02e4" +
    "\001\002\000\002\001\uffe9\000\014\101\246\143\054\165" +
    "\047\170\045\172\u02df\001\002\000\002\001\uffe8\000\014" +
    "\057\uffb0\070\uffb0\103\uffb0\127\uffb0\134\uffb0\001\uffaa\000" +
    "\002\001\uffa9\000\012\101\246\143\054\165\047\170\045" +
    "\001\002\000\002\001\uffea\000\014\101\246\143\054\165" +
    "\047\170\045\172\u02ce\001\002\000\002\001\uffe5\000\002" +
    "\001\uffeb\000\016\035\027\105\006\126\030\135\u02cc\150" +
    "\014\154\031\001\002\000\010\143\054\165\047\170\045" +
    "\001\002\000\002\001\uffe4\000\010\143\054\165\047\170" +
    "\045\001\002\000\004\076\u027f\001\uffe7\000\002\001\uffae" +
    "\000\002\001\uffac\000\002\001\uffab\000\014\057\033\070" +
    "\037\103\034\127\036\134\035\001\002\000\010\143\054" +
    "\165\047\170\045\001\002\000\010\143\054\165\047\170" +
    "\045\001\002\000\020\115\046\143\042\151\050\162\041" +
    "\165\047\167\044\170\045\001\002\000\010\143\054\165" +
    "\047\170\045\001\002\000\020\115\046\143\042\151\050" +
    "\162\041\165\047\167\044\170\045\001\002\000\010\051" +
    "\u0238\102\u023a\106\u0239\001\uffa3\000\002\001\uffa1\000\004" +
    "\152\u011e\001\002\000\004\152\057\001\uff97\000\002\001" +
    "\uffa2\000\002\001\uff94\000\002\001\uff9e\000\004\152\u0138" +
    "\001\002\000\002\001\uffa0\000\004\055\052\001\002\000" +
    "\010\143\054\165\047\170\045\001\002\000\010\051\061" +
    "\102\063\106\062\001\002\000\004\152\055\001\002\000" +
    "\004\170\045\001\002\000\004\152\057\001\uff95\000\004" +
    "\170\060\001\002\000\002\001\uff93\000\126\031\121\032" +
    "\145\033\151\034\152\036\125\037\200\044\103\047\215" +
    "\053\230\073\225\074\117\100\166\101\126\103\222\104" +
    "\210\105\154\106\130\113\153\114\217\115\046\116\135" +
    "\125\114\126\155\143\204\144\203\151\050\153\162\154" +
    "\212\155\171\156\176\157\175\160\211\161\163\162\041" +
    "\163\202\164\122\165\173\166\136\167\044\170\045\171" +
    "\150\172\140\001\002\000\022\052\073\053\064\062\066" +
    "\131\065\135\075\143\054\165\047\170\045\001\uff6f\000" +
    "\022\052\073\053\064\062\066\131\065\135\075\143\054" +
    "\165\047\170\045\001\uff6f\000\010\143\054\165\047\170" +
    "\045\001\002\000\010\143\054\165\047\170\045\001\002" +
    "\000\010\143\054\165\047\170\045\001\002\000\002\001" +
    "\uff92\000\004\052\u0220\001\uff6e\000\002\001\uff80\000\010" +
    "\051\u01e9\052\100\060\u021c\001\002\000\022\052\073\053" +
    "\064\062\066\131\065\135\075\143\054\165\047\170\045" +
    "\001\uff6f\000\004\140\u0217\001\002\000\012\053\076\143" +
    "\054\165\047\170\045\001\002\000\010\143\054\165\047" +
    "\170\045\001\002\000\010\051\102\052\100\060\101\001" +
    "\002\000\010\143\054\165\047\170\045\001\002\000\126" +
    "\031\121\032\145\033\151\034\152\036\125\037\200\044" +
    "\103\047\215\053\u020f\073\225\074\117\100\166\101\126" +
    "\103\222\104\210\105\154\106\130\113\153\114\217\115" +
    "\046\116\135\125\114\126\155\143\204\144\203\151\050" +
    "\153\162\154\212\155\171\156\176\157\175\160\211\161" +
    "\163\162\041\163\202\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\126\031\121\032" +
    "\145\033\151\034\152\036\125\037\200\044\103\047\215" +
    "\053\170\073\225\074\117\100\166\101\126\103\222\104" +
    "\210\105\154\106\130\113\153\114\217\115\046\116\135" +
    "\125\114\126\155\143\204\144\203\151\050\153\162\154" +
    "\212\155\171\156\176\157\175\160\211\161\163\162\041" +
    "\163\202\164\122\165\173\166\136\167\044\170\045\171" +
    "\150\172\140\001\002\000\010\143\054\165\047\170\045" +
    "\001\002\000\002\001\uff49\000\002\001\uff4b\000\002\001" +
    "\uff5b\000\006\041\u0204\076\u0203\001\uff3d\000\002\001\uff45" +
    "\000\044\004\355\005\342\006\356\007\350\010\351\011" +
    "\360\012\353\013\345\014\361\015\347\016\344\017\352" +
    "\020\343\021\354\022\346\023\362\054\u01ff\001\ufec1\000" +
    "\002\001\ufec3\000\002\001\ufeea\000\020\053\064\062\066" +
    "\131\065\135\075\143\054\165\047\170\045\001\002\000" +
    "\002\001\ufeee\000\004\133\u01fb\001\ufedf\000\002\001\ufe9c" +
    "\000\002\001\ufee6\000\002\001\ufe9a\000\106\031\121\032" +
    "\145\033\151\034\152\037\200\044\103\047\215\053\230" +
    "\073\225\074\117\100\166\101\126\102\317\103\222\104" +
    "\210\106\130\113\153\115\046\125\114\143\042\151\050" +
    "\153\162\155\171\157\175\161\163\162\041\163\202\164" +
    "\122\165\173\166\136\167\044\170\045\171\150\172\140" +
    "\001\002\000\002\001\uff37\000\002\001\uff39\000\062\031" +
    "\121\032\145\033\151\034\152\044\103\047\215\053\230" +
    "\073\225\074\117\100\166\101\126\106\130\115\046\143" +
    "\042\151\050\161\163\162\041\164\122\165\173\166\136" +
    "\167\044\170\045\171\150\172\140\001\002\000\136\031" +
    "\121\032\145\033\151\034\152\036\125\037\200\044\103" +
    "\047\215\053\u01d3\062\u01cf\073\225\074\117\100\166\101" +
    "\126\103\222\104\210\105\154\106\130\113\153\114\217" +
    "\115\046\116\135\125\114\126\155\131\u01d0\135\u01d6\137" +
    "\253\143\204\144\203\151\050\153\162\154\212\155\171" +
    "\156\176\157\175\160\211\161\163\162\041\163\202\164" +
    "\122\165\173\166\136\167\044\170\045\171\150\172\140" +
    "\001\002\000\002\001\uff88\000\126\031\121\032\145\033" +
    "\151\034\152\036\125\037\200\044\103\047\215\053\230" +
    "\073\225\074\117\100\166\101\126\103\222\104\210\105" +
    "\154\106\130\113\153\114\217\115\046\116\135\125\114" +
    "\126\155\143\204\144\203\151\050\153\162\154\212\155" +
    "\171\156\176\157\175\160\211\161\163\162\041\163\202" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\004\136\u01cb\001\ufebd\000\002\001\ufebf" +
    "\000\006\055\u01c9\102\306\001\ufeb9\000\002\001\ufebb\000" +
    "\126\031\121\032\145\033\151\034\152\036\125\037\200" +
    "\044\103\047\215\053\230\073\225\074\117\100\166\101" +
    "\126\103\222\104\210\105\154\106\130\113\153\114\217" +
    "\115\046\116\135\125\114\126\155\143\204\144\203\151" +
    "\050\153\162\154\212\155\171\156\176\157\175\160\211" +
    "\161\163\162\041\163\202\164\122\165\173\166\136\167" +
    "\044\170\045\171\150\172\140\001\002\000\072\031\121" +
    "\032\145\033\151\037\200\044\103\047\215\074\117\101" +
    "\126\103\222\104\210\106\130\113\153\115\046\125\114" +
    "\143\042\151\050\153\162\155\171\157\175\161\163\162" +
    "\041\163\202\165\173\166\136\167\044\170\045\171\150" +
    "\172\140\001\002\000\002\001\ufe96\000\002\001\ufe9d\000" +
    "\010\145\u0102\146\u0100\147\u0101\001\uff01\000\002\001\uff19" +
    "\000\032\060\u01ab\071\u01a9\072\u01a4\077\u01a3\107\u01ac\110" +
    "\u01a5\117\u01a2\120\u01a7\121\u01a6\122\u01a1\123\u01aa\124\u01a8" +
    "\001\uff32\000\002\001\uff35\000\002\001\ufe99\000\004\130" +
    "\u019d\001\uff5c\000\002\001\uff5d\000\002\001\ufe9e\000\002" +
    "\001\ufe98\000\004\102\u019a\001\002\000\020\053\064\062" +
    "\066\131\065\135\075\143\054\165\047\170\045\001\002" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\215\053\230\073\225\074\117\100\166\101\126\106\130" +
    "\115\046\143\042\151\050\161\163\162\041\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\215\053\230\073\225\074\117\100\166\101\126\106\130" +
    "\115\046\143\042\151\050\161\163\162\041\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\004\075\u014e\001\uff4d\000\002\001\uff4f\000\002\001" +
    "\ufed5\000\002\001\ufed7\000\020\053\064\062\066\131\065" +
    "\135\075\143\054\165\047\170\045\001\002\000\072\031" +
    "\121\032\145\033\151\037\200\044\103\047\215\074\117" +
    "\101\126\103\222\104\210\106\130\113\153\115\046\125" +
    "\114\143\042\151\050\153\162\155\171\157\175\161\163" +
    "\162\041\163\202\165\173\166\136\167\044\170\045\171" +
    "\150\172\140\001\002\000\002\001\ufeae\000\002\001\ufeb0" +
    "\000\106\031\121\032\145\033\151\034\152\037\200\044" +
    "\103\047\215\053\230\073\225\074\117\100\166\101\126" +
    "\102\322\103\222\104\210\106\130\113\153\115\046\125" +
    "\114\143\042\151\050\153\162\155\171\157\175\161\163" +
    "\162\041\163\202\164\122\165\173\166\136\167\044\170" +
    "\045\171\150\172\140\001\002\000\002\001\ufea2\000\130" +
    "\031\121\032\145\033\151\034\152\036\125\037\200\044" +
    "\103\047\215\053\230\073\225\074\117\100\166\101\126" +
    "\102\232\103\222\104\210\105\154\106\130\113\153\114" +
    "\217\115\046\116\135\125\114\126\155\143\204\144\203" +
    "\151\050\153\162\154\212\155\171\156\176\157\175\160" +
    "\211\161\163\162\041\163\202\164\122\165\173\166\136" +
    "\167\044\170\045\171\150\172\140\001\002\000\022\053" +
    "\064\062\066\102\u0141\131\065\135\075\143\054\165\047" +
    "\170\045\001\002\000\010\026\u013a\027\u013c\030\u013b\001" +
    "\ufef3\000\004\152\u0138\001\ufe9b\000\002\001\ufef8\000\022" +
    "\053\064\062\066\102\u0132\131\065\135\075\143\054\165" +
    "\047\170\045\001\002\000\064\031\121\032\145\033\151" +
    "\034\152\044\103\047\215\053\230\073\225\074\117\100" +
    "\166\101\126\102\u012a\106\130\115\046\143\042\151\050" +
    "\161\163\162\041\164\122\165\173\166\136\167\044\170" +
    "\045\171\150\172\140\001\002\000\004\040\u0128\001\ufed9" +
    "\000\020\053\064\062\066\131\065\135\075\143\054\165" +
    "\047\170\045\001\002\000\002\001\ufedb\000\020\053\064" +
    "\062\066\131\065\135\075\143\054\165\047\170\045\001" +
    "\002\000\062\031\121\032\145\033\151\034\152\044\103" +
    "\047\215\053\230\073\225\074\117\100\166\101\126\106" +
    "\130\115\046\143\042\151\050\161\163\162\041\164\122" +
    "\165\173\166\136\167\044\170\045\171\150\172\140\001" +
    "\002\000\064\031\121\032\145\033\151\034\152\044\103" +
    "\047\215\053\230\073\225\074\117\100\166\101\126\106" +
    "\130\115\046\143\042\151\050\152\u011e\161\163\162\041" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\002\001\uffa3\000\002\001\ufeb6\000\002" +
    "\001\ufeb7\000\020\053\064\062\066\131\065\135\075\143" +
    "\054\165\047\170\045\001\002\000\064\031\121\032\145" +
    "\033\151\034\152\044\103\047\215\053\230\073\225\074" +
    "\117\100\166\101\126\102\u0112\106\130\115\046\143\042" +
    "\151\050\161\163\162\041\164\122\165\173\166\136\167" +
    "\044\170\045\171\150\172\140\001\002\000\062\031\121" +
    "\032\145\033\151\034\152\044\103\047\215\053\230\073" +
    "\225\074\117\100\166\101\126\106\130\115\046\143\042" +
    "\151\050\161\163\162\041\164\122\165\173\166\136\167" +
    "\044\170\045\171\150\172\140\001\002\000\002\001\uff3f" +
    "\000\002\001\uff47\000\072\031\121\032\145\033\151\037" +
    "\200\044\103\047\215\074\117\101\126\103\222\104\210" +
    "\106\130\113\153\115\046\125\114\143\042\151\050\153" +
    "\162\155\171\157\175\161\163\162\041\163\202\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\ufe94\000\062\031\121\032\145\033\151\034\152" +
    "\044\103\047\215\053\230\073\225\074\117\100\166\101" +
    "\126\106\130\115\046\143\042\151\050\161\163\162\041" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\012\024\264\025\262\111\263\132\261" +
    "\001\ufefc\000\002\001\uff00\000\010\143\054\165\047\170" +
    "\045\001\002\000\002\001\uff3e\000\002\001\uff46\000\104" +
    "\031\121\032\145\033\151\034\152\037\200\044\103\047" +
    "\215\053\230\073\225\074\117\100\166\101\126\103\222" +
    "\104\210\106\130\113\153\115\046\125\114\143\042\151" +
    "\050\153\162\155\171\157\175\161\163\162\041\163\202" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\002\001\ufede\000\002\001\ufee2\000\004" +
    "\102\232\001\002\000\002\001\ufee5\000\126\031\121\032" +
    "\145\033\151\034\152\036\125\037\200\044\103\047\215" +
    "\053\230\073\225\074\117\100\166\101\126\103\222\104" +
    "\210\105\154\106\130\113\153\114\217\115\046\116\135" +
    "\125\114\126\155\143\204\144\203\151\050\153\162\154" +
    "\212\155\171\156\176\157\175\160\211\161\163\162\041" +
    "\163\202\164\122\165\173\166\136\167\044\170\045\171" +
    "\150\172\140\001\uff61\000\002\001\uff5f\000\004\140\240" +
    "\001\002\000\004\052\236\001\uff60\000\126\031\121\032" +
    "\145\033\151\034\152\036\125\037\200\044\103\047\215" +
    "\053\230\073\225\074\117\100\166\101\126\103\222\104" +
    "\210\105\154\106\130\113\153\114\217\115\046\116\135" +
    "\125\114\126\155\143\204\144\203\151\050\153\162\154" +
    "\212\155\171\156\176\157\175\160\211\161\163\162\041" +
    "\163\202\164\122\165\173\166\136\167\044\170\045\171" +
    "\150\172\140\001\002\000\002\001\uff5e\000\002\001\ufeb4" +
    "\000\004\060\243\001\002\000\002\001\uff5a\000\126\031" +
    "\121\032\145\033\151\034\152\036\125\037\200\044\103" +
    "\047\215\053\230\073\225\074\117\100\166\101\126\103" +
    "\222\104\210\105\154\106\130\113\153\114\217\115\046" +
    "\116\135\125\114\126\155\143\204\144\203\151\050\153" +
    "\162\154\212\155\171\156\176\157\175\160\211\161\163" +
    "\162\041\163\202\164\122\165\173\166\136\167\044\170" +
    "\045\171\150\172\140\001\002\000\010\045\250\052\245" +
    "\101\246\001\002\000\010\143\054\165\047\170\045\001" +
    "\002\000\130\031\121\032\145\033\151\034\152\036\125" +
    "\037\200\044\103\047\215\053\230\073\225\074\117\100" +
    "\166\101\126\103\222\104\210\105\154\106\130\113\153" +
    "\114\217\115\046\116\135\125\114\126\155\137\253\143" +
    "\204\144\203\151\050\153\162\154\212\155\171\156\176" +
    "\157\175\160\211\161\163\162\041\163\202\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\002\001\uff6b\000\126\031\121\032\145\033\151\034" +
    "\152\036\125\037\200\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\103\222\104\210\105\154\106" +
    "\130\113\153\114\217\115\046\116\135\125\114\126\155" +
    "\143\204\144\203\151\050\153\162\154\212\155\171\156" +
    "\176\157\175\160\211\161\163\162\041\163\202\164\122" +
    "\165\173\166\136\167\044\170\045\171\150\172\140\001" +
    "\002\000\002\001\uff62\000\002\001\uff63\000\002\001\uff66" +
    "\000\002\001\uff65\000\130\031\121\032\145\033\151\034" +
    "\152\036\125\037\200\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\103\222\104\210\105\154\106" +
    "\130\113\153\114\217\115\046\116\135\125\114\126\155" +
    "\137\256\143\204\144\203\151\050\153\162\154\212\155" +
    "\171\156\176\157\175\160\211\161\163\162\041\163\202" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\002\001\uff67\000\002\001\uff64\000\002" +
    "\001\uff6a\000\104\031\121\032\145\033\151\034\152\037" +
    "\200\044\103\047\274\053\230\073\266\074\117\100\267" +
    "\101\126\103\222\104\210\106\130\113\153\115\046\125" +
    "\114\143\042\151\050\153\162\155\171\157\175\161\271" +
    "\162\041\163\202\164\277\165\173\166\270\167\044\170" +
    "\045\171\150\172\140\001\002\000\104\031\121\032\145" +
    "\033\151\034\152\037\200\044\103\047\274\053\230\073" +
    "\266\074\117\100\267\101\126\103\222\104\210\106\130" +
    "\113\153\115\046\125\114\143\042\151\050\153\162\155" +
    "\171\157\175\161\271\162\041\163\202\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\104\031\121\032\145\033\151\034\152\037\200\044\103" +
    "\047\274\053\230\073\266\074\117\100\267\101\126\103" +
    "\222\104\210\106\130\113\153\115\046\125\114\143\042" +
    "\151\050\153\162\155\171\157\175\161\271\162\041\163" +
    "\202\164\277\165\173\166\270\167\044\170\045\171\150" +
    "\172\140\001\002\000\104\031\121\032\145\033\151\034" +
    "\152\037\200\044\103\047\274\053\230\073\266\074\117" +
    "\100\267\101\126\103\222\104\210\106\130\113\153\115" +
    "\046\125\114\143\042\151\050\153\162\155\171\157\175" +
    "\161\271\162\041\163\202\164\277\165\173\166\270\167" +
    "\044\170\045\171\150\172\140\001\002\000\004\040\337" +
    "\001\ufed9\000\062\031\121\032\145\033\151\034\152\044" +
    "\103\047\274\053\230\073\266\074\117\100\267\101\126" +
    "\106\130\115\046\143\042\151\050\161\271\162\041\164" +
    "\277\165\173\166\270\167\044\170\045\171\150\172\140" +
    "\001\002\000\064\031\121\032\145\033\151\034\152\044" +
    "\103\047\274\053\230\073\266\074\117\100\267\101\126" +
    "\102\322\106\130\115\046\143\042\151\050\161\271\162" +
    "\041\164\277\165\173\166\270\167\044\170\045\171\150" +
    "\172\140\001\002\000\050\031\121\032\145\033\151\044" +
    "\103\047\274\074\117\101\126\106\130\115\046\143\042" +
    "\151\050\161\271\162\041\165\173\166\270\167\044\170" +
    "\045\171\150\172\140\001\002\000\050\031\121\032\145" +
    "\033\151\044\103\047\274\074\117\101\126\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\165\173\166\270" +
    "\167\044\170\045\171\150\172\140\001\002\000\044\004" +
    "\355\005\342\006\356\007\350\010\351\011\360\012\353" +
    "\013\345\014\361\015\347\016\344\017\352\020\343\021" +
    "\354\022\346\023\362\054\341\001\ufec1\000\004\133\335" +
    "\001\ufedf\000\050\031\121\032\145\033\151\044\103\047" +
    "\274\074\117\101\126\106\130\115\046\143\042\151\050" +
    "\161\271\162\041\165\173\166\270\167\044\170\045\171" +
    "\150\172\140\001\002\000\010\026\326\027\327\030\330" +
    "\001\ufef0\000\006\055\307\102\306\001\ufeb9\000\064\031" +
    "\121\032\145\033\151\034\152\044\103\047\274\053\230" +
    "\073\266\074\117\100\267\101\126\102\317\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\004\136\302\001\ufebd\000\002\001\ufef5\000\060\031\121" +
    "\032\145\033\151\034\152\044\103\047\274\053\230\074" +
    "\117\100\303\101\126\106\130\115\046\143\042\151\050" +
    "\161\271\162\041\164\304\165\173\166\270\167\044\170" +
    "\045\171\150\172\140\001\002\000\004\102\322\001\002" +
    "\000\004\102\317\001\002\000\006\055\307\102\306\001" +
    "\ufeb8\000\126\031\121\032\145\033\151\034\152\036\125" +
    "\037\200\044\103\047\215\053\230\073\225\074\117\100" +
    "\166\101\126\103\222\104\210\105\154\106\130\113\153" +
    "\114\217\115\046\116\135\125\114\126\155\143\204\144" +
    "\203\151\050\153\162\154\212\155\171\156\176\157\175" +
    "\160\211\161\163\162\041\163\202\164\122\165\173\166" +
    "\136\167\044\170\045\171\150\172\140\001\uff61\000\060" +
    "\031\121\032\145\033\151\034\310\044\103\047\274\053" +
    "\312\074\117\100\311\101\126\106\130\115\046\143\042" +
    "\151\050\161\271\162\041\164\313\165\173\166\270\167" +
    "\044\170\045\171\150\172\140\001\002\000\002\001\ufeab" +
    "\000\002\001\ufeaa\000\002\001\ufeac\000\002\001\ufea9\000" +
    "\002\001\ufead\000\004\140\316\001\002\000\002\001\ufeb5" +
    "\000\126\031\121\032\145\033\151\034\152\036\125\037" +
    "\200\044\103\047\215\053\230\073\225\074\117\100\166" +
    "\101\126\103\222\104\210\105\154\106\130\113\153\114" +
    "\217\115\046\116\135\125\114\126\155\143\204\144\203" +
    "\151\050\153\162\154\212\155\171\156\176\157\175\160" +
    "\211\161\163\162\041\163\202\164\122\165\173\166\136" +
    "\167\044\170\045\171\150\172\140\001\uff61\000\004\140" +
    "\321\001\002\000\002\001\ufeb1\000\126\031\121\032\145" +
    "\033\151\034\152\036\125\037\200\044\103\047\215\053" +
    "\230\073\225\074\117\100\166\101\126\103\222\104\210" +
    "\105\154\106\130\113\153\114\217\115\046\116\135\125" +
    "\114\126\155\143\204\144\203\151\050\153\162\154\212" +
    "\155\171\156\176\157\175\160\211\161\163\162\041\163" +
    "\202\164\122\165\173\166\136\167\044\170\045\171\150" +
    "\172\140\001\uff61\000\004\140\324\001\002\000\002\001" +
    "\ufeb2\000\002\001\ufedd\000\062\031\121\032\145\033\151" +
    "\034\152\044\103\047\274\053\230\073\266\074\117\100" +
    "\267\101\126\106\130\115\046\143\042\151\050\161\271" +
    "\162\041\164\277\165\173\166\270\167\044\170\045\171" +
    "\150\172\140\001\002\000\062\031\121\032\145\033\151" +
    "\034\152\044\103\047\274\053\230\073\266\074\117\100" +
    "\267\101\126\106\130\115\046\143\042\151\050\161\271" +
    "\162\041\164\277\165\173\166\270\167\044\170\045\171" +
    "\150\172\140\001\002\000\062\031\121\032\145\033\151" +
    "\034\152\044\103\047\274\053\230\073\266\074\117\100" +
    "\267\101\126\106\130\115\046\143\042\151\050\161\271" +
    "\162\041\164\277\165\173\166\270\167\044\170\045\171" +
    "\150\172\140\001\002\000\002\001\ufee7\000\002\001\ufee8" +
    "\000\002\001\ufee9\000\002\001\ufe9f\000\060\031\121\032" +
    "\145\033\151\034\152\044\103\047\274\053\230\074\117" +
    "\100\303\101\126\106\130\115\046\143\042\151\050\161" +
    "\271\162\041\164\304\165\173\166\270\167\044\170\045" +
    "\171\150\172\140\001\002\000\004\040\337\001\ufed8\000" +
    "\060\031\121\032\145\033\151\034\152\044\103\047\274" +
    "\053\230\074\117\100\303\101\126\106\130\115\046\143" +
    "\042\151\050\161\271\162\041\164\304\165\173\166\270" +
    "\167\044\170\045\171\150\172\140\001\002\000\002\001" +
    "\ufed4\000\060\031\121\032\145\033\151\034\152\044\103" +
    "\047\274\053\230\074\117\100\303\101\126\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\304\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\ufed2\000\002\001\ufec7\000\002\001\ufec9\000\002" +
    "\001\ufecc\000\002\001\ufec5\000\002\001\ufeca\000\002\001" +
    "\ufed0\000\002\001\ufecf\000\002\001\ufec8\000\002\001\ufecd" +
    "\000\002\001\ufec6\000\002\001\ufed3\000\002\001\ufed1\000" +
    "\060\031\121\032\145\033\151\034\152\044\103\047\274" +
    "\053\230\074\117\100\303\101\126\106\130\115\046\143" +
    "\042\151\050\161\271\162\041\164\304\165\173\166\270" +
    "\167\044\170\045\171\150\172\140\001\002\000\002\001" +
    "\ufece\000\002\001\ufecb\000\002\001\ufec4\000\002\001\ufec0" +
    "\000\004\136\302\001\ufebc\000\002\001\ufea0\000\002\001" +
    "\ufea1\000\002\001\ufedc\000\010\026\326\027\327\030\330" +
    "\001\ufef1\000\002\001\ufef6\000\010\026\326\027\327\030" +
    "\330\001\ufeef\000\002\001\ufef4\000\010\026\326\027\327" +
    "\030\330\001\ufef2\000\002\001\ufef7\000\010\145\u0102\146" +
    "\u0100\147\u0101\001\uff0b\000\002\001\uff23\000\104\031\121" +
    "\032\145\033\151\034\152\037\200\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\103\222\104\210" +
    "\106\130\113\153\115\046\125\114\143\042\151\050\153" +
    "\162\155\171\157\175\161\271\162\041\163\202\164\277" +
    "\165\173\166\270\167\044\170\045\171\150\172\140\001" +
    "\002\000\104\031\121\032\145\033\151\034\152\037\200" +
    "\044\103\047\274\053\230\073\266\074\117\100\267\101" +
    "\126\103\222\104\210\106\130\113\153\115\046\125\114" +
    "\143\042\151\050\153\162\155\171\157\175\161\271\162" +
    "\041\163\202\164\277\165\173\166\270\167\044\170\045" +
    "\171\150\172\140\001\002\000\104\031\121\032\145\033" +
    "\151\034\152\037\200\044\103\047\274\053\230\073\266" +
    "\074\117\100\267\101\126\103\222\104\210\106\130\113" +
    "\153\115\046\125\114\143\042\151\050\153\162\155\171" +
    "\157\175\161\271\162\041\163\202\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\010" +
    "\026\326\027\327\030\330\001\ufef3\000\012\024\u0109\025" +
    "\u0107\111\u0108\132\u0106\001\ufefb\000\002\001\ufeff\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\012" +
    "\024\u0109\025\u0107\111\u0108\132\u0106\001\ufef9\000\002\001" +
    "\ufefd\000\012\024\u0109\025\u0107\111\u0108\132\u0106\001\ufefa" +
    "\000\002\001\ufefe\000\002\001\ufea3\000\002\001\ufea6\000" +
    "\010\145\u0102\146\u0100\147\u0101\001\uff0a\000\002\001\uff22" +
    "\000\004\171\u0115\001\002\000\010\145\u0102\146\u0100\147" +
    "\u0101\001\uff07\000\002\001\uff1f\000\004\140\u0116\001\002" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\215\053\230\073\225\074\117\100\166\101\126\106\130" +
    "\115\046\143\042\151\050\161\163\162\041\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\010\145\u0102\146\u0100\147\u0101\001\uff06\000\002\001" +
    "\uff1e\000\002\001\uff70\000\010\045\250\052\u011b\101\246" +
    "\001\002\000\020\053\064\062\066\131\065\135\075\143" +
    "\054\165\047\170\045\001\002\000\002\001\uff52\000\002" +
    "\001\uff71\000\006\151\u0121\170\045\001\002\000\010\145" +
    "\u0102\146\u0100\147\u0101\001\uff02\000\002\001\uff1a\000\002" +
    "\001\uff9f\000\010\145\u0102\146\u0100\147\u0101\001\uff03\000" +
    "\002\001\uff1b\000\010\045\250\052\u011b\101\246\001\002" +
    "\000\002\001\uff50\000\010\045\250\052\u011b\101\246\001" +
    "\002\000\002\001\uff59\000\102\031\121\032\145\033\151" +
    "\034\152\037\200\044\103\047\274\053\230\074\117\100" +
    "\303\101\126\103\222\104\210\106\130\113\153\115\046" +
    "\125\114\143\042\151\050\153\162\155\171\157\175\161" +
    "\271\162\041\163\202\164\304\165\173\166\270\167\044" +
    "\170\045\171\150\172\140\001\002\000\002\001\ufed6\000" +
    "\004\171\u012d\001\002\000\010\145\u0102\146\u0100\147\u0101" +
    "\001\uff09\000\002\001\uff21\000\004\140\u012e\001\002\000" +
    "\062\031\121\032\145\033\151\034\152\044\103\047\215" +
    "\053\230\073\225\074\117\100\166\101\126\106\130\115" +
    "\046\143\042\151\050\161\163\162\041\164\122\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\002\000" +
    "\010\145\u0102\146\u0100\147\u0101\001\uff08\000\002\001\uff20" +
    "\000\010\045\250\052\u011b\101\246\001\002\000\004\171" +
    "\u0133\001\002\000\004\140\u0134\001\002\000\020\053\064" +
    "\062\066\131\065\135\075\143\054\165\047\170\045\001" +
    "\002\000\010\045\250\052\u011b\101\246\001\002\000\002" +
    "\001\uff53\000\002\001\uff54\000\004\170\045\001\002\000" +
    "\004\152\057\001\uff96\000\104\031\121\032\145\033\151" +
    "\034\152\037\200\044\103\047\274\053\230\073\266\074" +
    "\117\100\267\101\126\103\222\104\210\106\130\113\153" +
    "\115\046\125\114\143\042\151\050\153\162\155\171\157" +
    "\175\161\271\162\041\163\202\164\277\165\173\166\270" +
    "\167\044\170\045\171\150\172\140\001\002\000\104\031" +
    "\121\032\145\033\151\034\152\037\200\044\103\047\274" +
    "\053\230\073\266\074\117\100\267\101\126\103\222\104" +
    "\210\106\130\113\153\115\046\125\114\143\042\151\050" +
    "\153\162\155\171\157\175\161\271\162\041\163\202\164" +
    "\277\165\173\166\270\167\044\170\045\171\150\172\140" +
    "\001\002\000\104\031\121\032\145\033\151\034\152\037" +
    "\200\044\103\047\274\053\230\073\266\074\117\100\267" +
    "\101\126\103\222\104\210\106\130\113\153\115\046\125" +
    "\114\143\042\151\050\153\162\155\171\157\175\161\271" +
    "\162\041\163\202\164\277\165\173\166\270\167\044\170" +
    "\045\171\150\172\140\001\002\000\002\001\ufeec\000\002" +
    "\001\ufeeb\000\002\001\ufeed\000\010\045\250\052\u011b\101" +
    "\246\001\002\000\004\171\u0142\001\002\000\004\140\u0143" +
    "\001\002\000\020\053\064\062\066\131\065\135\075\143" +
    "\054\165\047\170\045\001\002\000\010\045\250\052\u011b" +
    "\101\246\001\002\000\002\001\uff55\000\002\001\uff56\000" +
    "\002\001\uff82\000\002\001\ufee0\000\002\001\ufee3\000\002" +
    "\001\ufea4\000\002\001\ufea7\000\010\045\250\052\u011b\101" +
    "\246\001\002\000\002\001\uff57\000\126\031\121\032\145" +
    "\033\151\034\152\036\u015b\037\200\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\103\222\104\210" +
    "\105\u015c\106\130\113\153\114\u015a\115\046\116\u0151\125" +
    "\114\126\u0158\143\u014f\144\u015d\151\050\153\162\154\u0150" +
    "\155\171\156\u0159\157\175\160\u0156\161\271\162\041\163" +
    "\202\164\277\165\173\166\270\167\044\170\045\171\150" +
    "\172\140\001\002\000\064\031\121\032\145\033\151\034" +
    "\152\044\103\047\274\053\230\073\266\074\117\100\267" +
    "\101\126\106\130\115\046\143\042\151\050\152\u011e\161" +
    "\271\162\041\164\277\165\173\166\270\167\044\170\045" +
    "\171\150\172\140\001\002\000\062\031\121\032\145\033" +
    "\151\034\152\044\103\047\274\053\230\073\266\074\117" +
    "\100\267\101\126\106\130\115\046\143\042\151\050\161" +
    "\271\162\041\164\277\165\173\166\270\167\044\170\045" +
    "\171\150\172\140\001\002\000\104\031\121\032\145\033" +
    "\151\034\152\036\u015b\044\103\047\274\053\230\073\266" +
    "\074\117\100\267\101\126\105\u015c\106\130\114\u015a\115" +
    "\046\116\u0151\126\u0158\143\u014f\144\u015d\151\050\154\u0150" +
    "\156\u0159\160\u0156\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\010" +
    "\145\u0162\146\u0160\147\u0161\001\uff01\000\032\060\u0183\071" +
    "\u0181\072\u017c\077\u017a\107\u0184\110\u017d\117\u017b\120\u017f" +
    "\121\u017e\122\u0179\123\u0182\124\u0180\001\uff32\000\006\041" +
    "\u0172\076\u0171\001\uff3d\000\002\001\uff48\000\064\031\121" +
    "\032\145\033\151\034\152\044\103\047\274\053\230\073" +
    "\266\074\117\100\267\101\126\102\u016c\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\012" +
    "\024\u0109\025\u0107\111\u0108\132\u0106\001\ufefc\000\062\031" +
    "\121\032\145\033\151\034\152\044\103\047\274\053\230" +
    "\073\266\074\117\100\267\101\126\106\130\115\046\143" +
    "\042\151\050\161\271\162\041\164\277\165\173\166\270" +
    "\167\044\170\045\171\150\172\140\001\002\000\064\031" +
    "\121\032\145\033\151\034\152\044\103\047\274\053\230" +
    "\073\266\074\117\100\267\101\126\102\u0166\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\062\031\121\032\145\033\151\034\152\044\103\047\274" +
    "\053\230\073\266\074\117\100\267\101\126\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\062\031\121\032\145\033\151\034\152\044\103\047\274" +
    "\053\230\073\266\074\117\100\267\101\126\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\062\031\121\032\145\033\151\034\152\044\103\047\274" +
    "\053\230\073\266\074\117\100\267\101\126\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\062\031\121\032\145\033\151\034\152\044\103\047\274" +
    "\053\230\073\266\074\117\100\267\101\126\106\130\115" +
    "\046\143\042\151\050\161\271\162\041\164\277\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\uff4a\000\010\145\u0162\146\u0160\147\u0161\001\uff03" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\274\053\230\073\266\074\117\100\267\101\126\106\130" +
    "\115\046\143\042\151\050\161\271\162\041\164\277\165" +
    "\173\166\270\167\044\170\045\171\150\172\140\001\002" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\274\053\230\073\266\074\117\100\267\101\126\106\130" +
    "\115\046\143\042\151\050\161\271\162\041\164\277\165" +
    "\173\166\270\167\044\170\045\171\150\172\140\001\002" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\274\053\230\073\266\074\117\100\267\101\126\106\130" +
    "\115\046\143\042\151\050\161\271\162\041\164\277\165" +
    "\173\166\270\167\044\170\045\171\150\172\140\001\002" +
    "\000\010\145\u0162\146\u0160\147\u0161\001\uff05\000\010\145" +
    "\u0162\146\u0160\147\u0161\001\uff0c\000\010\145\u0162\146\u0160" +
    "\147\u0161\001\uff0b\000\004\171\u0168\001\002\000\010\145" +
    "\u0162\146\u0160\147\u0161\001\uff09\000\004\140\u0169\001\002" +
    "\000\062\031\121\032\145\033\151\034\152\044\103\047" +
    "\274\053\230\073\266\074\117\100\267\101\126\106\130" +
    "\115\046\143\042\151\050\161\271\162\041\164\277\165" +
    "\173\166\270\167\044\170\045\171\150\172\140\001\002" +
    "\000\010\145\u0162\146\u0160\147\u0161\001\uff08\000\010\145" +
    "\u0162\146\u0160\147\u0161\001\uff04\000\004\171\u016e\001\002" +
    "\000\010\145\u0162\146\u0160\147\u0161\001\uff07\000\004\140" +
    "\u016f\001\002\000\062\031\121\032\145\033\151\034\152" +
    "\044\103\047\274\053\230\073\266\074\117\100\267\101" +
    "\126\106\130\115\046\143\042\151\050\161\271\162\041" +
    "\164\277\165\173\166\270\167\044\170\045\171\150\172" +
    "\140\001\002\000\010\145\u0162\146\u0160\147\u0161\001\uff06" +
    "\000\104\031\121\032\145\033\151\034\152\036\u015b\044" +
    "\103\047\274\053\230\073\266\074\117\100\267\101\126" +
    "\105\u015c\106\130\114\u015a\115\046\116\u0151\126\u0158\143" +
    "\u014f\144\u015d\151\050\154\u0150\156\u0159\160\u0156\161\271" +
    "\162\041\164\277\165\173\166\270\167\044\170\045\171" +
    "\150\172\140\001\002\000\104\031\121\032\145\033\151" +
    "\034\152\036\u015b\044\103\047\274\053\230\073\266\074" +
    "\117\100\267\101\126\105\u015c\106\130\114\u015a\115\046" +
    "\116\u0151\126\u0158\143\u014f\144\u015d\151\050\154\u0150\156" +
    "\u0159\160\u0156\161\271\162\041\164\277\165\173\166\270" +
    "\167\044\170\045\171\150\172\140\001\002\000\002\001" +
    "\uff36\000\002\001\uff3a\000\004\056\u0176\001\uff3f\000\104" +
    "\031\121\032\145\033\151\034\152\036\u015b\044\103\047" +
    "\274\053\230\073\266\074\117\100\267\101\126\105\u015c" +
    "\106\130\114\u015a\115\046\116\u0151\126\u0158\143\u014f\144" +
    "\u015d\151\050\154\u0150\156\u0159\160\u0156\161\271\162\041" +
    "\164\277\165\173\166\270\167\044\170\045\171\150\172" +
    "\140\001\002\000\002\001\uff3b\000\002\001\uff3c\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\062" +
    "\031\121\032\145\033\151\034\152\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\106\130\115\046" +
    "\143\042\151\050\161\271\162\041\164\277\165\173\166" +
    "\270\167\044\170\045\171\150\172\140\001\002\000\010" +
    "\145\u0162\146\u0160\147\u0161\001\uff16\000\010\145\u0162\146" +
    "\u0160\147\u0161\001\uff17\000\010\145\u0162\146\u0160\147\u0161" +
    "\001\uff10\000\010\145\u0162\146\u0160\147\u0161\001\uff15\000" +
    "\010\145\u0162\146\u0160\147\u0161\001\uff0e\000\010\145\u0162" +
    "\146\u0160\147\u0161\001\uff0f\000\010\145\u0162\146\u0160\147" +
    "\u0161\001\uff0d\000\010\145\u0162\146\u0160\147\u0161\001\uff14" +
    "\000\010\145\u0162\146\u0160\147\u0161\001\uff13\000\010\145" +
    "\u0162\146\u0160\147\u0161\001\uff11\000\010\145\u0162\146\u0160" +
    "\147\u0161\001\uff18\000\010\145\u0162\146\u0160\147\u0161\001" +
    "\uff12\000\002\001\uff31\000\010\145\u0162\146\u0160\147\u0161" +
    "\001\uff0a\000\010\145\u0162\146\u0160\147\u0161\001\uff02\000" +
    "\010\145\u0102\146\u0100\147\u0101\001\uff04\000\002\001\uff1c" +
    "\000\010\145\u0102\146\u0100\147\u0101\001\uff05\000\002\001" +
    "\uff1d\000\010\045\250\052\u011b\101\246\001\002\000\002" +
    "\001\uff58\000\126\031\121\032\145\033\151\034\152\036" +
    "\125\037\200\044\103\047\215\053\230\073\225\074\117" +
    "\100\166\101\126\103\222\104\210\105\154\106\130\113" +
    "\153\114\217\115\046\116\135\125\114\126\155\143\204" +
    "\144\203\151\050\153\162\154\212\155\171\156\176\157" +
    "\175\160\211\161\163\162\041\163\202\164\122\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\uff61\000" +
    "\004\140\u019c\001\002\000\002\001\ufeb3\000\126\031\121" +
    "\032\145\033\151\034\152\036\u015b\037\200\044\103\047" +
    "\274\053\230\073\266\074\117\100\267\101\126\103\222" +
    "\104\210\105\u015c\106\130\113\153\114\u015a\115\046\116" +
    "\u0151\125\114\126\u0158\143\u014f\144\u015d\151\050\153\162" +
    "\154\u0150\155\171\156\u0159\157\175\160\u0156\161\271\162" +
    "\041\163\202\164\277\165\173\166\270\167\044\170\045" +
    "\171\150\172\140\001\002\000\004\075\u01a0\001\uff4c\000" +
    "\002\001\uff4e\000\104\031\121\032\145\033\151\034\152" +
    "\036\u015b\044\103\047\274\053\230\073\266\074\117\100" +
    "\267\101\126\105\u015c\106\130\114\u015a\115\046\116\u0151" +
    "\126\u0158\143\u014f\144\u015d\151\050\154\u0150\156\u0159\160" +
    "\u0156\161\271\162\041\164\277\165\173\166\270\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\062\031\121\032" +
    "\145\033\151\034\152\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\106\130\115\046\143\042\151" +
    "\050\161\163\162\041\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\010\145\u0102\146" +
    "\u0100\147\u0101\001\uff16\000\002\001\uff2e\000\010\145\u0102" +
    "\146\u0100\147\u0101\001\uff17\000\002\001\uff2f\000\010\145" +
    "\u0102\146\u0100\147\u0101\001\uff10\000\002\001\uff28\000\010" +
    "\145\u0102\146\u0100\147\u0101\001\uff15\000\002\001\uff2d\000" +
    "\010\145\u0102\146\u0100\147\u0101\001\uff0e\000\002\001\uff26" +
    "\000\010\145\u0102\146\u0100\147\u0101\001\uff0f\000\002\001" +
    "\uff27\000\010\145\u0102\146\u0100\147\u0101\001\uff0d\000\002" +
    "\001\uff25\000\010\145\u0102\146\u0100\147\u0101\001\uff14\000" +
    "\002\001\uff2c\000\010\145\u0102\146\u0100\147\u0101\001\uff13" +
    "\000\002\001\uff2b\000\010\145\u0102\146\u0100\147\u0101\001" +
    "\uff18\000\002\001\uff30\000\010\145\u0102\146\u0100\147\u0101" +
    "\001\uff11\000\002\001\uff29\000\010\145\u0102\146\u0100\147" +
    "\u0101\001\uff12\000\002\001\uff2a\000\002\001\ufea5\000\002" +
    "\001\ufea8\000\002\001\uff34\000\002\001\uff33\000\102\031" +
    "\121\032\145\033\151\034\310\037\200\044\103\047\274" +
    "\053\312\074\117\100\311\101\126\103\222\104\210\106" +
    "\130\113\153\115\046\125\114\143\042\151\050\153\162" +
    "\155\171\157\175\161\271\162\041\163\202\164\313\165" +
    "\173\166\270\167\044\170\045\171\150\172\140\001\002" +
    "\000\002\001\ufeaf\000\102\031\121\032\145\033\151\034" +
    "\152\037\200\044\103\047\274\053\230\074\117\100\303" +
    "\101\126\103\222\104\210\106\130\113\153\115\046\125" +
    "\114\143\042\151\050\153\162\155\171\157\175\161\271" +
    "\162\041\163\202\164\304\165\173\166\270\167\044\170" +
    "\045\171\150\172\140\001\002\000\002\001\ufeba\000\004" +
    "\141\u01ce\001\002\000\002\001\ufe97\000\010\143\054\165" +
    "\047\170\045\001\002\000\010\143\054\165\047\170\045" +
    "\001\002\000\006\051\u01e9\052\100\001\002\000\012\045" +
    "\250\052\u01e3\101\246\137\u01e5\001\002\000\012\102\232" +
    "\143\054\165\047\170\045\001\002\000\002\001\uff72\000" +
    "\006\051\uff92\052\uff92\001\uffa3\000\012\053\u01d7\143\054" +
    "\165\047\170\045\001\002\000\010\143\054\165\047\170" +
    "\045\001\002\000\006\051\102\052\100\001\002\000\006" +
    "\051\u01da\052\100\001\002\000\126\031\121\032\145\033" +
    "\151\034\152\036\125\037\200\044\103\047\215\053\u01dc" +
    "\073\225\074\117\100\166\101\126\103\222\104\210\105" +
    "\154\106\130\113\153\114\217\115\046\116\135\125\114" +
    "\126\155\143\204\144\203\151\050\153\162\154\212\155" +
    "\171\156\176\157\175\160\211\161\163\162\041\163\202" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\002\001\uff89\000\130\031\121\032\145" +
    "\033\151\034\152\036\125\037\200\044\103\047\215\053" +
    "\230\073\225\074\117\100\166\101\126\102\232\103\222" +
    "\104\210\105\154\106\130\113\153\114\217\115\046\116" +
    "\135\125\114\126\155\143\204\144\203\151\050\153\162" +
    "\154\212\155\171\156\176\157\175\160\211\161\163\162" +
    "\041\163\202\164\122\165\173\166\136\167\044\170\045" +
    "\171\150\172\140\001\002\000\002\001\uff83\000\006\051" +
    "\u01df\052\100\001\002\000\126\031\121\032\145\033\151" +
    "\034\152\036\125\037\200\044\103\047\215\053\u01e1\073" +
    "\225\074\117\100\166\101\126\103\222\104\210\105\154" +
    "\106\130\113\153\114\217\115\046\116\135\125\114\126" +
    "\155\143\204\144\203\151\050\153\162\154\212\155\171" +
    "\156\176\157\175\160\211\161\163\162\041\163\202\164" +
    "\122\165\173\166\136\167\044\170\045\171\150\172\140" +
    "\001\002\000\002\001\uff8a\000\130\031\121\032\145\033" +
    "\151\034\152\036\125\037\200\044\103\047\215\053\230" +
    "\073\225\074\117\100\166\101\126\102\232\103\222\104" +
    "\210\105\154\106\130\113\153\114\217\115\046\116\135" +
    "\125\114\126\155\143\204\144\203\151\050\153\162\154" +
    "\212\155\171\156\176\157\175\160\211\161\163\162\041" +
    "\163\202\164\122\165\173\166\136\167\044\170\045\171" +
    "\150\172\140\001\002\000\002\001\uff84\000\020\053\u01e7" +
    "\062\u01cf\131\u01d0\135\u01d6\143\054\165\047\170\045\001" +
    "\002\000\004\137\u01e6\001\002\000\002\001\ufe92\000\002" +
    "\001\ufe93\000\010\143\054\165\047\170\045\001\002\000" +
    "\002\001\uff73\000\126\031\121\032\145\033\151\034\152" +
    "\036\125\037\200\044\103\047\215\053\u01eb\073\225\074" +
    "\117\100\166\101\126\103\222\104\210\105\154\106\130" +
    "\113\153\114\217\115\046\116\135\125\114\126\155\143" +
    "\204\144\203\151\050\153\162\154\212\155\171\156\176" +
    "\157\175\160\211\161\163\162\041\163\202\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\002\001\uff87\000\130\031\121\032\145\033\151\034" +
    "\152\036\125\037\200\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\102\232\103\222\104\210\105" +
    "\154\106\130\113\153\114\217\115\046\116\135\125\114" +
    "\126\155\143\204\144\203\151\050\153\162\154\212\155" +
    "\171\156\176\157\175\160\211\161\163\162\041\163\202" +
    "\164\122\165\173\166\136\167\044\170\045\171\150\172" +
    "\140\001\002\000\002\001\uff81\000\006\051\u01ee\052\100" +
    "\001\002\000\126\031\121\032\145\033\151\034\152\036" +
    "\125\037\200\044\103\047\215\053\u01f0\073\225\074\117" +
    "\100\166\101\126\103\222\104\210\105\154\106\130\113" +
    "\153\114\217\115\046\116\135\125\114\126\155\143\204" +
    "\144\203\151\050\153\162\154\212\155\171\156\176\157" +
    "\175\160\211\161\163\162\041\163\202\164\122\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\uff8c\000\130\031\121\032\145\033\151\034\152" +
    "\036\125\037\200\044\103\047\215\053\230\073\225\074" +
    "\117\100\166\101\126\102\232\103\222\104\210\105\154" +
    "\106\130\113\153\114\217\115\046\116\135\125\114\126" +
    "\155\143\204\144\203\151\050\153\162\154\212\155\171" +
    "\156\176\157\175\160\211\161\163\162\041\163\202\164" +
    "\122\165\173\166\136\167\044\170\045\171\150\172\140" +
    "\001\002\000\002\001\uff86\000\006\051\u01f3\052\100\001" +
    "\002\000\126\031\121\032\145\033\151\034\152\036\125" +
    "\037\200\044\103\047\215\053\u01f5\073\225\074\117\100" +
    "\166\101\126\103\222\104\210\105\154\106\130\113\153" +
    "\114\217\115\046\116\135\125\114\126\155\143\204\144" +
    "\203\151\050\153\162\154\212\155\171\156\176\157\175" +
    "\160\211\161\163\162\041\163\202\164\122\165\173\166" +
    "\136\167\044\170\045\171\150\172\140\001\002\000\002" +
    "\001\uff8b\000\130\031\121\032\145\033\151\034\152\036" +
    "\125\037\200\044\103\047\215\053\230\073\225\074\117" +
    "\100\166\101\126\102\232\103\222\104\210\105\154\106" +
    "\130\113\153\114\217\115\046\116\135\125\114\126\155" +
    "\143\204\144\203\151\050\153\162\154\212\155\171\156" +
    "\176\157\175\160\211\161\163\162\041\163\202\164\122" +
    "\165\173\166\136\167\044\170\045\171\150\172\140\001" +
    "\002\000\002\001\uff85\000\010\145\u0102\146\u0100\147\u0101" +
    "\001\uff0c\000\002\001\uff24\000\002\001\ufee1\000\002\001" +
    "\ufee4\000\102\031\121\032\145\033\151\034\152\037\200" +
    "\044\103\047\274\053\230\074\117\100\303\101\126\103" +
    "\222\104\210\106\130\113\153\115\046\125\114\143\042" +
    "\151\050\153\162\155\171\157\175\161\271\162\041\163" +
    "\202\164\304\165\173\166\270\167\044\170\045\171\150" +
    "\172\140\001\002\000\002\001\ufeda\000\010\045\250\052" +
    "\u011b\101\246\001\002\000\002\001\uff51\000\102\031\121" +
    "\032\145\033\151\034\152\037\200\044\103\047\274\053" +
    "\230\074\117\100\303\101\126\103\222\104\210\106\130" +
    "\113\153\115\046\125\114\143\042\151\050\153\162\155" +
    "\171\157\175\161\271\162\041\163\202\164\304\165\173" +
    "\166\270\167\044\170\045\171\150\172\140\001\002\000" +
    "\102\031\121\032\145\033\151\034\152\037\200\044\103" +
    "\047\274\053\230\074\117\100\303\101\126\103\222\104" +
    "\210\106\130\113\153\115\046\125\114\143\042\151\050" +
    "\153\162\155\171\157\175\161\271\162\041\163\202\164" +
    "\304\165\173\166\270\167\044\170\045\171\150\172\140" +
    "\001\002\000\002\001\ufec2\000\002\001\ufebe\000\126\031" +
    "\121\032\145\033\151\034\152\036\125\037\200\044\103" +
    "\047\215\053\230\073\225\074\117\100\166\101\126\103" +
    "\222\104\210\105\154\106\130\113\153\114\217\115\046" +
    "\116\135\125\114\126\155\143\204\144\203\151\050\153" +
    "\162\154\212\155\171\156\176\157\175\160\211\161\163" +
    "\162\041\163\202\164\122\165\173\166\136\167\044\170" +
    "\045\171\150\172\140\001\002\000\126\031\121\032\145" +
    "\033\151\034\152\036\u015b\037\200\044\103\047\274\053" +
    "\230\073\266\074\117\100\267\101\126\103\222\104\210" +
    "\105\u015c\106\130\113\153\114\u015a\115\046\116\u0151\125" +
    "\114\126\u0158\143\u014f\144\u015d\151\050\153\162\154\u0150" +
    "\155\171\156\u0159\157\175\160\u0156\161\271\162\041\163" +
    "\202\164\277\165\173\166\270\167\044\170\045\171\150" +
    "\172\140\001\002\000\002\001\uff38\000\002\001\uff42\000" +
    "\002\001\uff40\000\004\056\u0209\001\uff3f\000\126\031\121" +
    "\032\145\033\151\034\152\036\125\037\200\044\103\047" +
    "\215\053\230\073\225\074\117\100\166\101\126\103\222" +
    "\104\210\105\154\106\130\113\153\114\217\115\046\116" +
    "\135\125\114\126\155\143\204\144\203\151\050\153\162" +
    "\154\212\155\171\156\176\157\175\160\211\161\163\162" +
    "\041\163\202\164\122\165\173\166\136\167\044\170\045" +
    "\171\150\172\140\001\002\000\002\001\uff41\000\002\001" +
    "\uff44\000\002\001\uff43\000\002\001\ufe95\000\002\001\uff7b" +
    "\000\130\031\121\032\145\033\151\034\152\036\125\037" +
    "\200\044\103\047\215\053\230\073\225\074\117\100\166" +
    "\101\126\102\232\103\222\104\210\105\154\106\130\113" +
    "\153\114\217\115\046\116\135\125\114\126\155\143\204" +
    "\144\203\151\050\153\162\154\212\155\171\156\176\157" +
    "\175\160\211\161\163\162\041\163\202\164\122\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\uff75\000\002\001\uff91\000\010\051\u01da\052\100" +
    "\060\u0213\001\002\000\126\031\121\032\145\033\151\034" +
    "\152\036\125\037\200\044\103\047\215\053\u0215\073\225" +
    "\074\117\100\166\101\126\103\222\104\210\105\154\106" +
    "\130\113\153\114\217\115\046\116\135\125\114\126\155" +
    "\143\204\144\203\151\050\153\162\154\212\155\171\156" +
    "\176\157\175\160\211\161\163\162\041\163\202\164\122" +
    "\165\173\166\136\167\044\170\045\171\150\172\140\001" +
    "\002\000\002\001\uff7c\000\130\031\121\032\145\033\151" +
    "\034\152\036\125\037\200\044\103\047\215\053\230\073" +
    "\225\074\117\100\166\101\126\102\232\103\222\104\210" +
    "\105\154\106\130\113\153\114\217\115\046\116\135\125" +
    "\114\126\155\143\204\144\203\151\050\153\162\154\212" +
    "\155\171\156\176\157\175\160\211\161\163\162\041\163" +
    "\202\164\122\165\173\166\136\167\044\170\045\171\150" +
    "\172\140\001\002\000\002\001\uff76\000\004\051\u0218\001" +
    "\002\000\126\031\121\032\145\033\151\034\152\036\125" +
    "\037\200\044\103\047\215\053\230\073\225\074\117\100" +
    "\166\101\126\103\222\104\210\105\154\106\130\113\153" +
    "\114\217\115\046\116\135\125\114\126\155\143\204\144" +
    "\203\151\050\153\162\154\212\155\171\156\176\157\175" +
    "\160\211\161\163\162\041\163\202\164\122\165\173\166" +
    "\136\167\044\170\045\171\150\172\140\001\002\000\004" +
    "\101\246\001\002\000\002\001\uffb9\000\002\001\uff6c\000" +
    "\126\031\121\032\145\033\151\034\152\036\125\037\200" +
    "\044\103\047\215\053\u021e\073\225\074\117\100\166\101" +
    "\126\103\222\104\210\105\154\106\130\113\153\114\217" +
    "\115\046\116\135\125\114\126\155\143\204\144\203\151" +
    "\050\153\162\154\212\155\171\156\176\157\175\160\211" +
    "\161\163\162\041\163\202\164\122\165\173\166\136\167" +
    "\044\170\045\171\150\172\140\001\002\000\002\001\uff7a" +
    "\000\130\031\121\032\145\033\151\034\152\036\125\037" +
    "\200\044\103\047\215\053\230\073\225\074\117\100\166" +
    "\101\126\102\232\103\222\104\210\105\154\106\130\113" +
    "\153\114\217\115\046\116\135\125\114\126\155\143\204" +
    "\144\203\151\050\153\162\154\212\155\171\156\176\157" +
    "\175\160\211\161\163\162\041\163\202\164\122\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\uff74\000\022\052\073\053\064\062\066\131\065" +
    "\135\075\143\054\165\047\170\045\001\uff6f\000\002\001" +
    "\uff6d\000\010\051\u01f3\052\100\060\u0223\001\002\000\126" +
    "\031\121\032\145\033\151\034\152\036\125\037\200\044" +
    "\103\047\215\053\u0225\073\225\074\117\100\166\101\126" +
    "\103\222\104\210\105\154\106\130\113\153\114\217\115" +
    "\046\116\135\125\114\126\155\143\204\144\203\151\050" +
    "\153\162\154\212\155\171\156\176\157\175\160\211\161" +
    "\163\162\041\163\202\164\122\165\173\166\136\167\044" +
    "\170\045\171\150\172\140\001\002\000\002\001\uff7e\000" +
    "\130\031\121\032\145\033\151\034\152\036\125\037\200" +
    "\044\103\047\215\053\230\073\225\074\117\100\166\101" +
    "\126\102\232\103\222\104\210\105\154\106\130\113\153" +
    "\114\217\115\046\116\135\125\114\126\155\143\204\144" +
    "\203\151\050\153\162\154\212\155\171\156\176\157\175" +
    "\160\211\161\163\162\041\163\202\164\122\165\173\166" +
    "\136\167\044\170\045\171\150\172\140\001\002\000\002" +
    "\001\uff78\000\010\051\u01ee\052\100\060\u0228\001\002\000" +
    "\126\031\121\032\145\033\151\034\152\036\125\037\200" +
    "\044\103\047\215\053\u022a\073\225\074\117\100\166\101" +
    "\126\103\222\104\210\105\154\106\130\113\153\114\217" +
    "\115\046\116\135\125\114\126\155\143\204\144\203\151" +
    "\050\153\162\154\212\155\171\156\176\157\175\160\211" +
    "\161\163\162\041\163\202\164\122\165\173\166\136\167" +
    "\044\170\045\171\150\172\140\001\002\000\002\001\uff7f" +
    "\000\130\031\121\032\145\033\151\034\152\036\125\037" +
    "\200\044\103\047\215\053\230\073\225\074\117\100\166" +
    "\101\126\102\232\103\222\104\210\105\154\106\130\113" +
    "\153\114\217\115\046\116\135\125\114\126\155\143\204" +
    "\144\203\151\050\153\162\154\212\155\171\156\176\157" +
    "\175\160\211\161\163\162\041\163\202\164\122\165\173" +
    "\166\136\167\044\170\045\171\150\172\140\001\002\000" +
    "\002\001\uff79\000\010\051\u01df\052\100\060\u022d\001\002" +
    "\000\126\031\121\032\145\033\151\034\152\036\125\037" +
    "\200\044\103\047\215\053\u022f\073\225\074\117\100\166" +
    "\101\126\103\222\104\210\105\154\106\130\113\153\114" +
    "\217\115\046\116\135\125\114\126\155\143\204\144\203" +
    "\151\050\153\162\154\212\155\171\156\176\157\175\160" +
    "\211\161\163\162\041\163\202\164\122\165\173\166\136" +
    "\167\044\170\045\171\150\172\140\001\002\000\002\001" +
    "\uff7d\000\130\031\121\032\145\033\151\034\152\036\125" +
    "\037\200\044\103\047\215\053\230\073\225\074\117\100" +
    "\166\101\126\102\232\103\222\104\210\105\154\106\130" +
    "\113\153\114\217\115\046\116\135\125\114\126\155\143" +
    "\204\144\203\151\050\153\162\154\212\155\171\156\176" +
    "\157\175\160\211\161\163\162\041\163\202\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\002\001\uff77\000\004\141\u0232\001\002\000\004\051" +
    "\u0233\001\002\000\126\031\121\032\145\033\151\034\152" +
    "\036\125\037\200\044\103\047\215\053\230\073\225\074" +
    "\117\100\166\101\126\103\222\104\210\105\154\106\130" +
    "\113\153\114\217\115\046\116\135\125\114\126\155\143" +
    "\204\144\203\151\050\153\162\154\212\155\171\156\176" +
    "\157\175\160\211\161\163\162\041\163\202\164\122\165" +
    "\173\166\136\167\044\170\045\171\150\172\140\001\002" +
    "\000\004\101\246\001\002\000\002\001\uffba\000\004\101" +
    "\246\001\002\000\002\001\uffb8\000\126\031\121\032\145" +
    "\033\151\034\152\036\125\037\200\044\103\047\215\053" +
    "\230\073\225\074\117\100\166\101\126\103\222\104\210" +
    "\105\154\106\130\113\153\114\217\115\046\116\135\125" +
    "\114\126\155\143\204\144\203\151\050\153\162\154\212" +
    "\155\171\156\176\157\175\160\211\161\163\162\041\163" +
    "\202\164\122\165\173\166\136\167\044\170\045\171\150" +
    "\172\140\001\002\000\022\052\073\053\064\062\066\131" +
    "\065\135\075\143\054\165\047\170\045\001\uff6f\000\022" +
    "\052\073\053\064\062\066\131\065\135\075\143\054\165" +
    "\047\170\045\001\uff6f\000\004\140\u023c\001\002\000\004" +
    "\051\u023d\001\002\000\126\031\121\032\145\033\151\034" +
    "\152\036\125\037\200\044\103\047\215\053\230\073\225" +
    "\074\117\100\166\101\126\103\222\104\210\105\154\106" +
    "\130\113\153\114\217\115\046\116\135\125\114\126\155" +
    "\143\204\144\203\151\050\153\162\154\212\155\171\156" +
    "\176\157\175\160\211\161\163\162\041\163\202\164\122" +
    "\165\173\166\136\167\044\170\045\171\150\172\140\001" +
    "\002\000\004\101\246\001\002\000\002\001\uffbc\000\004" +
    "\141\u0241\001\002\000\004\051\u0242\001\002\000\126\031" +
    "\121\032\145\033\151\034\152\036\125\037\200\044\103" +
    "\047\215\053\230\073\225\074\117\100\166\101\126\103" +
    "\222\104\210\105\154\106\130\113\153\114\217\115\046" +
    "\116\135\125\114\126\155\143\204\144\203\151\050\153" +
    "\162\154\212\155\171\156\176\157\175\160\211\161\163" +
    "\162\041\163\202\164\122\165\173\166\136\167\044\170" +
    "\045\171\150\172\140\001\002\000\004\101\246\001\002" +
    "\000\002\001\uffbd\000\004\101\246\001\002\000\002\001" +
    "\uffbb\000\006\042\u0248\102\u0249\001\ufffd\000\010\143\054" +
    "\165\047\170\045\001\002\000\020\115\046\143\042\151" +
    "\050\162\041\165\047\167\044\170\045\001\uff9d\000\004" +
    "\140\u024f\001\002\000\004\052\u024d\001\uff9c\000\002\001" +
    "\uff9b\000\020\115\046\143\042\151\050\162\041\165\047" +
    "\167\044\170\045\001\002\000\002\001\uff9a\000\004\042" +
    "\u0250\001\ufffb\000\010\143\054\165\047\170\045\001\002" +
    "\000\002\001\ufffa\000\002\001\ufffc\000\010\101\246\102" +
    "\u0262\106\u0261\001\uffa3\000\004\055\u0255\001\002\000\010" +
    "\143\054\165\047\170\045\001\002\000\010\101\246\102" +
    "\u0259\106\u0258\001\002\000\002\001\uffb2\000\022\052\073" +
    "\053\064\062\066\131\065\135\075\143\054\165\047\170" +
    "\045\001\uff6f\000\022\052\073\053\064\062\066\131\065" +
    "\135\075\143\054\165\047\170\045\001\uff6f\000\004\140" +
    "\u025b\001\002\000\004\101\246\001\002\000\002\001\uffb3" +
    "\000\004\141\u025e\001\002\000\004\101\246\001\002\000" +
    "\002\001\uffb4\000\002\001\uffb5\000\022\052\073\053\064" +
    "\062\066\131\065\135\075\143\054\165\047\170\045\001" +
    "\uff6f\000\022\052\073\053\064\062\066\131\065\135\075" +
    "\143\054\165\047\170\045\001\uff6f\000\004\140\u0264\001" +
    "\002\000\004\101\246\001\002\000\002\001\uffb6\000\004" +
    "\141\u0267\001\002\000\004\101\246\001\002\000\002\001" +
    "\uffb7\000\012\060\u026a\101\246\102\u026e\106\u026d\001\002" +
    "\000\126\031\121\032\145\033\151\034\152\036\125\037" +
    "\200\044\103\047\215\053\230\073\225\074\117\100\166" +
    "\101\126\103\222\104\210\105\154\106\130\113\153\114" +
    "\217\115\046\116\135\125\114\126\155\143\204\144\203" +
    "\151\050\153\162\154\212\155\171\156\176\157\175\160" +
    "\211\161\163\162\041\163\202\164\122\165\173\166\136" +
    "\167\044\170\045\171\150\172\140\001\002\000\002\001" +
    "\uffc0\000\002\001\uffbf\000\012\141\u0274\143\054\165\047" +
    "\170\045\001\002\000\012\140\u0270\143\054\165\047\170" +
    "\045\001\002\000\006\052\100\140\u0272\001\002\000\006" +
    "\060\u026a\101\246\001\002\000\002\001\uffc1\000\006\060" +
    "\u026a\101\246\001\002\000\002\001\uffc2\000\006\060\u026a" +
    "\101\246\001\002\000\006\052\100\141\u0276\001\002\000" +
    "\006\060\u026a\101\246\001\002\000\002\001\uffc4\000\002" +
    "\001\uffc3\000\002\001\uffbe\000\004\101\u027b\001\002\000" +
    "\012\137\u027d\143\054\165\047\170\045\001\002\000\006" +
    "\052\100\137\u027e\001\002\000\002\001\ufff8\000\002\001" +
    "\ufff9\000\006\050\020\142\024\001\002\000\012\101\246" +
    "\143\054\165\047\170\045\001\002\000\014\067\u0284\101" +
    "\246\143\054\165\047\170\045\001\uffd6\000\004\067\u0284" +
    "\001\uffd6\000\004\063\u02a6\001\uffdb\000\006\061\u0285\171" +
    "\u0288\001\002\000\004\171\u029d\001\002\000\022\100\u0296" +
    "\115\u029b\143\u0299\151\u029c\162\u0298\165\047\167\u029a\170" +
    "\045\001\002\000\004\052\u0293\001\uffd7\000\030\046\u028b" +
    "\051\u028a\055\u028c\100\uffc8\115\uffc8\143\uffc8\151\uffc8\162" +
    "\uffc8\165\uffc8\167\uffc8\170\uffc8\001\uffd9\000\002\001\uffd5" +
    "\000\004\171\u0295\001\002\000\006\061\u0285\171\u0292\001" +
    "\002\000\004\055\u028d\001\002\000\004\171\u028e\001\002" +
    "\000\004\051\u028f\001\uffc7\000\004\171\u0290\001\002\000" +
    "\002\001\uffc6\000\004\052\u0293\001\uffd8\000\006\051\u028a" +
    "\055\u028c\001\uffc8\000\006\061\u0285\171\u0292\001\002\000" +
    "\002\001\uffd4\000\002\001\uffc5\000\002\001\uffd1\000\002" +
    "\001\uffd3\000\002\001\uffce\000\004\152\055\001\uffd0\000" +
    "\002\001\uffcf\000\002\001\uffcd\000\002\001\uffd2\000\006" +
    "\051\u029e\055\u029f\001\uffcc\000\004\171\u02a4\001\002\000" +
    "\004\055\u02a0\001\002\000\004\171\u02a1\001\002\000\004" +
    "\051\u02a2\001\uffcb\000\004\171\u02a3\001\002\000\002\001" +
    "\uffca\000\002\001\uffc9\000\002\001\uffe0\000\004\171\u02a7" +
    "\001\002\000\002\001\uffda\000\004\067\u0284\001\uffd6\000" +
    "\004\067\u0284\001\uffd6\000\004\063\u02a6\001\uffdb\000\002" +
    "\001\uffdc\000\004\063\u02a6\001\uffdb\000\002\001\uffe1\000" +
    "\004\063\u02a6\001\uffdb\000\002\001\uffdd\000\012\052\100" +
    "\060\u02b3\064\u02b2\077\u02b1\001\uffa4\000\020\115\046\143" +
    "\042\151\050\162\041\165\047\167\044\170\045\001\002" +
    "\000\020\115\046\143\042\151\050\162\041\165\047\167" +
    "\044\170\045\001\002\000\020\115\046\143\042\151\050" +
    "\162\041\165\047\167\044\170\045\001\002\000\004\101" +
    "\u02b5\001\002\000\022\052\073\053\064\062\066\131\065" +
    "\135\075\143\054\165\047\170\045\001\uff6f\000\004\137" +
    "\u02b7\001\002\000\004\101\246\001\uff69\000\002\001\uffaf" +
    "\000\002\001\uff68\000\004\132\u02bc\001\uffa5\000\002\001" +
    "\uff99\000\020\115\046\143\042\151\050\162\041\165\047" +
    "\167\044\170\045\001\002\000\002\001\uff98\000\002\001" +
    "\uffa7\000\004\132\u02bc\001\uffa6\000\004\102\u02c1\001\uffff" +
    "\000\012\061\u02c3\143\054\165\047\170\045\001\002\000" +
    "\002\001\uff90\000\010\143\054\165\047\170\045\001\002" +
    "\000\006\052\u02c5\140\u02c6\001\002\000\012\061\u02c8\143" +
    "\054\165\047\170\045\001\002\000\002\001\ufffe\000\002" +
    "\001\uff8e\000\010\143\054\165\047\170\045\001\002\000" +
    "\002\001\uff8d\000\002\001\uff8f\000\002\001\uffa8\000\002" +
    "\001\uffaa\000\004\101\246\001\002\000\004\101\246\001" +
    "\002\000\002\001\ufff1\000\002\001\uffef\000\002\001\ufff0" +
    "\000\014\067\u0284\101\246\143\054\165\047\170\045\001" +
    "\uffd6\000\004\067\u0284\001\uffd6\000\004\063\u02a6\001\uffdb" +
    "\000\002\001\uffe2\000\004\067\u0284\001\uffd6\000\004\067" +
    "\u0284\001\uffd6\000\004\063\u02a6\001\uffdb\000\002\001\uffde" +
    "\000\004\063\u02a6\001\uffdb\000\002\001\uffe3\000\004\063" +
    "\u02a6\001\uffdb\000\002\001\uffdf\000\004\101\246\001\002" +
    "\000\004\101\246\001\002\000\002\001\uffee\000\002\001" +
    "\uffec\000\002\001\uffed\000\014\101\246\143\054\165\047" +
    "\170\045\172\u02ee\001\002\000\004\171\u02e5\001\002\000" +
    "\004\140\u02e6\001\002\000\004\066\u02e7\001\002\000\014" +
    "\101\246\143\054\165\047\170\045\172\u02e9\001\002\000" +
    "\004\101\246\001\002\000\004\101\246\001\002\000\002" +
    "\001\ufff4\000\002\001\ufff2\000\002\001\ufff3\000\004\101" +
    "\246\001\002\000\004\101\246\001\002\000\002\001\ufff7" +
    "\000\002\001\ufff5\000\002\001\ufff6\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02f0\000\006\106\003\107\004\001\001\000\002\001" +
    "\001\000\024\012\025\013\014\037\015\051\011\067\007" +
    "\076\020\100\021\101\024\123\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\u02df" +
    "\053\u02dd\054\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\u02d2\053\u02d1\054\042" +
    "\001\001\000\002\001\001\000\010\031\u02ce\053\u02cc\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\100\021\101\u02ca\001\001\000\006\053\u02bf\054\042\001" +
    "\001\000\002\001\001\000\010\053\066\054\042\055\u02af" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\u0279" +
    "\054\042\001\001\000\006\053\u0268\054\042\001\001\000" +
    "\010\053\u0252\054\042\102\u0253\001\001\000\006\053\u0246" +
    "\054\042\001\001\000\010\053\037\054\042\102\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\052\054\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\025\156\026" +
    "\155\030\u0235\031\215\040\104\041\103\042\213\043\212" +
    "\044\223\045\222\046\200\047\176\053\204\054\042\057" +
    "\123\060\122\061\114\062\112\063\146\064\145\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\113" +
    "\141\114\140\115\173\116\171\117\220\120\217\121\164" +
    "\122\163\001\001\000\016\014\070\015\067\017\u0230\053" +
    "\066\054\042\055\071\001\001\000\016\014\070\015\067" +
    "\017\073\053\066\054\042\055\071\001\001\000\010\053" +
    "\066\054\042\055\u022b\001\001\000\010\053\066\054\042" +
    "\055\u0226\001\001\000\010\053\066\054\042\055\u0221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\070\015\067\017\u021a\053" +
    "\066\054\042\055\071\001\001\000\002\001\001\000\010" +
    "\053\066\054\042\055\076\001\001\000\010\053\066\054" +
    "\042\055\u0211\001\001\000\002\001\001\000\006\053\u0210" +
    "\054\042\001\001\000\140\002\107\003\106\004\166\005" +
    "\105\006\133\007\132\010\143\011\142\021\111\022\110" +
    "\023\206\024\205\025\156\026\155\030\u020d\031\215\040" +
    "\104\041\103\042\213\043\212\044\223\045\222\046\200" +
    "\047\176\053\204\054\042\057\123\060\122\061\114\062" +
    "\112\063\146\064\145\065\117\066\115\070\131\071\130" +
    "\073\160\074\157\102\136\113\141\114\140\115\173\116" +
    "\171\117\220\120\217\121\164\122\163\001\001\000\140" +
    "\002\107\003\106\004\166\005\105\006\133\007\132\010" +
    "\143\011\142\021\111\022\110\023\206\024\205\025\156" +
    "\026\155\030\126\031\215\040\104\041\103\042\213\043" +
    "\212\044\223\045\222\046\200\047\176\053\204\054\042" +
    "\057\123\060\122\061\114\062\112\063\146\064\145\065" +
    "\117\066\115\070\131\071\130\073\160\074\157\102\136" +
    "\113\141\114\140\115\173\116\171\117\220\120\217\121" +
    "\164\122\163\001\001\000\006\053\u020c\054\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u01ff\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\070\015" +
    "\u0118\016\u01fc\053\066\054\042\055\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\166\005\u01f9\006\133" +
    "\007\132\021\111\022\110\023\206\024\205\031\215\046" +
    "\200\047\176\053\204\054\042\061\u01f8\062\324\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\121" +
    "\164\122\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\004\166\006\133\007\132\021\111\022\110\023" +
    "\206\024\205\031\215\046\200\047\176\053\204\054\042" +
    "\061\114\062\112\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\u01f7\114\u01f6\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\150\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\014\u01d3\020\u01d1\021\111\022\110\023\206\024" +
    "\205\025\156\026\155\030\253\031\215\033\254\040\104" +
    "\041\103\042\213\043\212\044\223\045\222\046\200\047" +
    "\176\053\u01d4\054\042\055\u01d0\057\123\060\122\061\114" +
    "\062\112\063\146\064\145\065\117\066\115\070\131\071" +
    "\130\073\160\074\157\102\136\113\141\114\140\115\173" +
    "\116\171\117\220\120\217\121\164\122\163\001\001\000" +
    "\002\001\001\000\140\002\107\003\106\004\166\005\105" +
    "\006\133\007\132\010\143\011\142\021\111\022\110\023" +
    "\206\024\205\025\156\026\155\030\u01cc\031\215\040\104" +
    "\041\103\042\213\043\212\044\223\045\222\046\200\047" +
    "\176\053\204\054\042\057\123\060\122\061\114\062\112" +
    "\063\146\064\145\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\141\114\140\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\106\004\166\005\u01c6\006\133\007\132\010\143\011" +
    "\142\021\111\022\110\023\206\024\205\031\215\046\200" +
    "\047\176\053\204\054\042\057\u01c7\060\u0190\061\114\062" +
    "\112\065\117\066\115\070\131\071\130\073\160\074\157" +
    "\102\136\113\141\114\140\115\173\116\171\117\220\120" +
    "\217\121\164\122\163\001\001\000\022\004\166\005\u01c5" +
    "\031\215\053\204\054\042\102\136\121\u01c4\122\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\070\015\u0118\016\u0197\053\066\054\042\055\071\001\001" +
    "\000\074\004\166\006\133\007\132\021\111\022\110\023" +
    "\206\024\205\031\215\046\200\047\176\053\204\054\042" +
    "\061\114\062\112\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\u0196\114\u0195\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\074\004" +
    "\166\006\133\007\132\021\111\022\110\023\206\024\205" +
    "\031\215\046\200\047\176\053\204\054\042\061\114\062" +
    "\112\065\117\066\115\070\131\071\130\073\160\074\157" +
    "\102\136\113\u0194\114\u0193\115\173\116\171\117\220\120" +
    "\217\121\164\122\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\070\015\u0118\016\u014b\053\066\054\042\055\071\001\001" +
    "\000\022\004\166\005\u014a\031\215\053\204\054\042\102" +
    "\136\121\u0149\122\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\004\166\005\u0148\006\133\007\132\021" +
    "\111\022\110\023\206\024\205\031\215\046\200\047\176" +
    "\053\204\054\042\061\u0147\062\366\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\121\164\122\163" +
    "\001\001\000\002\001\001\000\140\002\107\003\106\004" +
    "\166\005\105\006\133\007\132\010\143\011\142\021\111" +
    "\022\110\023\206\024\205\025\156\026\155\030\u0146\031" +
    "\215\040\104\041\103\042\213\043\212\044\223\045\222" +
    "\046\200\047\176\053\204\054\042\057\123\060\122\061" +
    "\114\062\112\063\146\064\145\065\117\066\115\070\131" +
    "\071\130\073\160\074\157\102\136\113\141\114\140\115" +
    "\173\116\171\117\220\120\217\121\164\122\163\001\001" +
    "\000\016\014\070\015\u0118\016\u013f\053\066\054\042\055" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\070\015\u0118\016\u0130\053\066\054" +
    "\042\055\071\001\001\000\074\004\166\006\133\007\132" +
    "\021\111\022\110\023\206\024\205\031\215\046\200\047" +
    "\176\053\204\054\042\061\114\062\112\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\u012b\114" +
    "\u012a\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\016\014\070\015\u0118\016" +
    "\u0125\053\066\054\042\055\071\001\001\000\002\001\001" +
    "\000\016\014\070\015\u0118\016\u0123\053\066\054\042\055" +
    "\071\001\001\000\074\004\166\006\133\007\132\021\111" +
    "\022\110\023\206\024\205\031\215\046\200\047\176\053" +
    "\204\054\042\061\114\062\112\065\117\066\115\070\131" +
    "\071\130\073\160\074\157\102\136\113\u0122\114\u0121\115" +
    "\173\116\171\117\220\120\217\121\164\122\163\001\001" +
    "\000\074\004\166\006\133\007\132\021\111\022\110\023" +
    "\206\024\205\031\215\046\200\047\176\053\204\054\042" +
    "\061\114\062\112\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\u011f\114\u011e\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\070" +
    "\015\u0118\016\u0119\053\066\054\042\055\071\001\001\000" +
    "\074\004\166\006\133\007\132\021\111\022\110\023\206" +
    "\024\205\031\215\046\200\047\176\053\204\054\042\061" +
    "\114\062\112\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\u0113\114\u0112\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\074\004\166" +
    "\006\133\007\132\021\111\022\110\023\206\024\205\031" +
    "\215\046\200\047\176\053\204\054\042\061\114\062\112" +
    "\065\117\066\115\070\131\071\130\073\160\074\157\102" +
    "\136\113\u0110\114\u010f\115\173\116\171\117\220\120\217" +
    "\121\164\122\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\166\005\u010e\031\215\053\204\054\042" +
    "\102\136\121\u010d\122\333\001\001\000\002\001\001\000" +
    "\074\004\166\006\133\007\132\021\111\022\110\023\206" +
    "\024\205\031\215\046\200\047\176\053\204\054\042\061" +
    "\114\062\112\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\376\114\375\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\241\053\240\054\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\004\166" +
    "\005\230\006\133\007\132\021\111\022\110\023\206\024" +
    "\205\031\215\046\200\047\176\053\204\054\042\061\226" +
    "\062\225\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\121\164\122\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\144\002\107\003\106\004\166\005\105\006\133\007\132" +
    "\010\143\011\142\021\111\022\110\023\206\024\205\025" +
    "\156\026\155\030\232\031\215\035\233\036\234\040\104" +
    "\041\103\042\213\043\212\044\223\045\222\046\200\047" +
    "\176\053\204\054\042\057\123\060\122\061\114\062\112" +
    "\063\146\064\145\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\141\114\140\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\107" +
    "\003\106\004\166\005\105\006\133\007\132\010\143\011" +
    "\142\021\111\022\110\023\206\024\205\025\156\026\155" +
    "\030\236\031\215\040\104\041\103\042\213\043\212\044" +
    "\223\045\222\046\200\047\176\053\204\054\042\057\123" +
    "\060\122\061\114\062\112\063\146\064\145\065\117\066" +
    "\115\070\131\071\130\073\160\074\157\102\136\113\141" +
    "\114\140\115\173\116\171\117\220\120\217\121\164\122" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\107\003\106\004" +
    "\166\005\105\006\133\007\132\010\143\011\142\021\111" +
    "\022\110\023\206\024\205\025\156\026\155\030\243\031" +
    "\215\040\104\041\103\042\213\043\212\044\223\045\222" +
    "\046\200\047\176\053\204\054\042\057\123\060\122\061" +
    "\114\062\112\063\146\064\145\065\117\066\115\070\131" +
    "\071\130\073\160\074\157\102\136\113\141\114\140\115" +
    "\173\116\171\117\220\120\217\121\164\122\163\001\001" +
    "\000\006\031\250\034\246\001\001\000\010\050\257\053" +
    "\240\054\042\001\001\000\142\002\107\003\106\004\166" +
    "\005\105\006\133\007\132\010\143\011\142\021\111\022" +
    "\110\023\206\024\205\025\156\026\155\030\253\031\215" +
    "\033\254\040\104\041\103\042\213\043\212\044\223\045" +
    "\222\046\200\047\176\053\204\054\042\057\123\060\122" +
    "\061\114\062\112\063\146\064\145\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\113\141\114\140" +
    "\115\173\116\171\117\220\120\217\121\164\122\163\001" +
    "\001\000\002\001\001\000\140\002\107\003\106\004\166" +
    "\005\105\006\133\007\132\010\143\011\142\021\111\022" +
    "\110\023\206\024\205\025\156\026\155\030\251\031\215" +
    "\040\104\041\103\042\213\043\212\044\223\045\222\046" +
    "\200\047\176\053\204\054\042\057\123\060\122\061\114" +
    "\062\112\063\146\064\145\065\117\066\115\070\131\071" +
    "\130\073\160\074\157\102\136\113\141\114\140\115\173" +
    "\116\171\117\220\120\217\121\164\122\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\107\003\106\004\166\005\105\006" +
    "\133\007\132\010\143\011\142\021\111\022\110\023\206" +
    "\024\205\025\156\026\155\030\256\031\215\040\104\041" +
    "\103\042\213\043\212\044\223\045\222\046\200\047\176" +
    "\053\204\054\042\057\123\060\122\061\114\062\112\063" +
    "\146\064\145\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\141\114\140\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\166\005" +
    "\374\007\275\022\271\024\205\031\215\047\264\053\204" +
    "\054\042\062\112\066\272\071\277\074\157\102\136\116" +
    "\373\122\163\001\001\000\042\004\166\005\372\007\275" +
    "\022\271\024\205\031\215\047\264\053\204\054\042\062" +
    "\112\066\272\071\277\074\157\102\136\116\371\122\163" +
    "\001\001\000\042\004\166\005\370\007\275\022\271\024" +
    "\205\031\215\047\264\053\204\054\042\062\112\066\272" +
    "\071\277\074\157\102\136\116\367\122\163\001\001\000" +
    "\042\004\166\005\300\007\275\022\271\024\205\031\215" +
    "\047\264\053\204\054\042\062\112\066\272\071\277\074" +
    "\157\102\136\116\274\122\163\001\001\000\002\001\001" +
    "\000\036\004\166\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\225\066\272\071\277\074\157" +
    "\102\136\122\163\001\001\000\036\004\166\007\275\022" +
    "\271\024\205\031\215\047\264\053\204\054\042\062\366" +
    "\066\272\071\277\074\157\102\136\122\163\001\001\000" +
    "\016\004\166\031\215\053\204\054\042\102\136\122\365" +
    "\001\001\000\016\004\166\031\215\053\204\054\042\102" +
    "\136\122\364\001\001\000\004\072\356\001\001\000\002" +
    "\001\001\000\016\004\166\031\215\053\204\054\042\102" +
    "\136\122\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\166\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\324\066\272\071\277\074\157" +
    "\102\136\122\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\166\007\304\024\205\031\215\053\204" +
    "\054\042\102\136\122\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\144\002\107\003\106" +
    "\004\166\005\105\006\133\007\132\010\143\011\142\021" +
    "\111\022\110\023\206\024\205\025\156\026\155\030\232" +
    "\031\215\035\314\036\234\040\104\041\103\042\213\043" +
    "\212\044\223\045\222\046\200\047\176\053\204\054\042" +
    "\057\123\060\122\061\114\062\112\063\146\064\145\065" +
    "\117\066\115\070\131\071\130\073\160\074\157\102\136" +
    "\113\141\114\140\115\173\116\171\117\220\120\217\121" +
    "\164\122\163\001\001\000\016\004\166\031\215\053\204" +
    "\054\042\102\136\122\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\144\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\025\156\026" +
    "\155\030\232\031\215\035\317\036\234\040\104\041\103" +
    "\042\213\043\212\044\223\045\222\046\200\047\176\053" +
    "\204\054\042\057\123\060\122\061\114\062\112\063\146" +
    "\064\145\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\141\114\140\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\144\002\107\003\106\004\166\005\105" +
    "\006\133\007\132\010\143\011\142\021\111\022\110\023" +
    "\206\024\205\025\156\026\155\030\232\031\215\035\322" +
    "\036\234\040\104\041\103\042\213\043\212\044\223\045" +
    "\222\046\200\047\176\053\204\054\042\057\123\060\122" +
    "\061\114\062\112\063\146\064\145\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\113\141\114\140" +
    "\115\173\116\171\117\220\120\217\121\164\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\166\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\332\066\272\071\277\074\157" +
    "\102\136\122\163\001\001\000\036\004\166\007\275\022" +
    "\271\024\205\031\215\047\264\053\204\054\042\062\331" +
    "\066\272\071\277\074\157\102\136\122\163\001\001\000" +
    "\036\004\166\007\275\022\271\024\205\031\215\047\264" +
    "\053\204\054\042\062\330\066\272\071\277\074\157\102" +
    "\136\122\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\166\007" +
    "\275\022\271\024\205\031\215\047\335\053\204\054\042" +
    "\071\277\074\157\102\136\122\163\001\001\000\002\001" +
    "\001\000\030\004\166\007\275\022\271\024\205\031\215" +
    "\053\204\054\042\071\277\074\337\102\136\122\163\001" +
    "\001\000\002\001\001\000\024\004\166\007\275\024\205" +
    "\031\215\053\204\054\042\071\363\102\136\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\166\007\275\022\271\024\205\031\215" +
    "\053\204\054\042\071\277\074\362\102\136\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\166\005\u010c\007\275\022\271\024\205\031" +
    "\215\047\264\053\204\054\042\062\112\066\272\071\277" +
    "\074\157\102\136\116\u0102\120\u010b\122\163\001\001\000" +
    "\044\004\166\005\u010a\007\275\022\271\024\205\031\215" +
    "\047\264\053\204\054\042\062\112\066\272\071\277\074" +
    "\157\102\136\116\u0102\120\u0109\122\163\001\001\000\044" +
    "\004\166\005\u0104\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\112\066\272\071\277\074\157" +
    "\102\136\116\u0102\120\u0103\122\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\166" +
    "\007\275\022\271\024\205\031\215\047\264\053\204\054" +
    "\042\062\112\066\272\071\277\074\157\102\136\116\373" +
    "\122\163\001\001\000\040\004\166\007\275\022\271\024" +
    "\205\031\215\047\264\053\204\054\042\062\112\066\272" +
    "\071\277\074\157\102\136\116\371\122\163\001\001\000" +
    "\040\004\166\007\275\022\271\024\205\031\215\047\264" +
    "\053\204\054\042\062\112\066\272\071\277\074\157\102" +
    "\136\116\367\122\163\001\001\000\040\004\166\007\275" +
    "\022\271\024\205\031\215\047\264\053\204\054\042\062" +
    "\112\066\272\071\277\074\157\102\136\116\274\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\004\166\006\133\007\132\021\111\022\110\023\206\024" +
    "\205\031\215\046\200\047\176\053\204\054\042\061\114" +
    "\062\112\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\u0117\114\u0116\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\250\034\u011b" +
    "\001\001\000\014\014\070\015\u011c\053\066\054\042\055" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\250\034\u0124\001\001\000\002\001\001\000\006\031" +
    "\250\034\u0126\001\001\000\002\001\001\000\032\004\166" +
    "\005\u0128\007\275\022\271\024\205\031\215\053\204\054" +
    "\042\071\277\074\337\102\136\122\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\004\166\006\133\007\132" +
    "\021\111\022\110\023\206\024\205\031\215\046\200\047" +
    "\176\053\204\054\042\061\114\062\112\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\u012f\114" +
    "\u012e\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\250\034\u0136\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\070\015\u0118\016\u0134\053\066\054\042\055" +
    "\071\001\001\000\006\031\250\034\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u0138\001\001\000" +
    "\002\001\001\000\040\004\166\005\u013e\007\275\022\271" +
    "\024\205\031\215\047\264\053\204\054\042\062\332\066" +
    "\272\071\277\074\157\102\136\122\163\001\001\000\040" +
    "\004\166\005\u013d\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\330\066\272\071\277\074\157" +
    "\102\136\122\163\001\001\000\040\004\166\005\u013c\007" +
    "\275\022\271\024\205\031\215\047\264\053\204\054\042" +
    "\062\331\066\272\071\277\074\157\102\136\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\250\034\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\070\015\u0118\016\u0143\053\066" +
    "\054\042\055\071\001\001\000\006\031\250\034\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\250\034\u014c\001\001\000\002" +
    "\001\001\000\062\003\u0153\004\166\005\u015d\007\275\011" +
    "\u0152\022\271\024\205\031\215\041\u0154\043\212\045\222" +
    "\047\264\053\204\054\042\060\122\062\112\066\272\071" +
    "\277\074\157\102\136\114\u0151\116\u0102\120\u0156\122\163" +
    "\001\001\000\044\004\166\007\275\022\271\024\205\031" +
    "\215\047\264\053\204\054\042\062\112\066\272\071\277" +
    "\074\157\102\136\114\u0192\116\u0102\120\u0156\122\163\001" +
    "\001\000\044\004\166\007\275\022\271\024\205\031\215" +
    "\047\264\053\204\054\042\062\112\066\272\071\277\074" +
    "\157\102\136\114\u0191\116\u0102\120\u0156\122\163\001\001" +
    "\000\050\004\166\007\275\011\u0152\022\271\024\205\031" +
    "\215\047\264\053\204\054\042\060\u0190\062\112\066\272" +
    "\071\277\074\157\102\136\114\u0151\116\u0102\120\u0156\122" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\166\007\275\022" +
    "\271\024\205\031\215\047\264\053\204\054\042\062\112" +
    "\066\272\071\277\074\157\102\136\114\u016c\116\u0102\120" +
    "\u0156\122\163\001\001\000\002\001\001\000\044\004\166" +
    "\007\275\022\271\024\205\031\215\047\264\053\204\054" +
    "\042\062\112\066\272\071\277\074\157\102\136\114\u016a" +
    "\116\u0102\120\u0156\122\163\001\001\000\044\004\166\007" +
    "\275\022\271\024\205\031\215\047\264\053\204\054\042" +
    "\062\112\066\272\071\277\074\157\102\136\114\u0166\116" +
    "\u0102\120\u0156\122\163\001\001\000\044\004\166\007\275" +
    "\022\271\024\205\031\215\047\264\053\204\054\042\062" +
    "\112\066\272\071\277\074\157\102\136\114\u0164\116\u0102" +
    "\120\u0156\122\163\001\001\000\044\004\166\007\275\022" +
    "\271\024\205\031\215\047\264\053\204\054\042\062\112" +
    "\066\272\071\277\074\157\102\136\114\u0163\116\u0102\120" +
    "\u0156\122\163\001\001\000\044\004\166\007\275\022\271" +
    "\024\205\031\215\047\264\053\204\054\042\062\112\066" +
    "\272\071\277\074\157\102\136\114\u0162\116\u0102\120\u0156" +
    "\122\163\001\001\000\044\004\166\007\275\022\271\024" +
    "\205\031\215\047\264\053\204\054\042\062\112\066\272" +
    "\071\277\074\157\102\136\114\u015e\116\u0102\120\u0156\122" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\166\007\275\022\271\024\205\031\215\047\264\053" +
    "\204\054\042\062\112\066\272\071\277\074\157\102\136" +
    "\116\u0102\120\u010b\122\163\001\001\000\042\004\166\007" +
    "\275\022\271\024\205\031\215\047\264\053\204\054\042" +
    "\062\112\066\272\071\277\074\157\102\136\116\u0102\120" +
    "\u0109\122\163\001\001\000\042\004\166\007\275\022\271" +
    "\024\205\031\215\047\264\053\204\054\042\062\112\066" +
    "\272\071\277\074\157\102\136\116\u0102\120\u0103\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\166\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\112\066\272\071\277\074\157" +
    "\102\136\114\u0169\116\u0102\120\u0156\122\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\166\007\275\022" +
    "\271\024\205\031\215\047\264\053\204\054\042\062\112" +
    "\066\272\071\277\074\157\102\136\114\u016f\116\u0102\120" +
    "\u0156\122\163\001\001\000\002\001\001\000\060\003\u0153" +
    "\004\166\007\275\011\u0152\022\271\024\205\031\215\041" +
    "\u0173\043\u0174\045\222\047\264\053\204\054\042\060\122" +
    "\062\112\066\272\071\277\074\157\102\136\114\u0151\116" +
    "\u0102\120\u0156\122\163\001\001\000\050\004\166\007\275" +
    "\011\u0152\022\271\024\205\031\215\047\264\053\204\054" +
    "\042\060\u0172\062\112\066\272\071\277\074\157\102\136" +
    "\114\u0151\116\u0102\120\u0156\122\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0153" +
    "\004\166\007\275\011\u0152\022\271\024\205\031\215\043" +
    "\u0177\045\u0176\047\264\053\204\054\042\060\122\062\112" +
    "\066\272\071\277\074\157\102\136\114\u0151\116\u0102\120" +
    "\u0156\122\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\166\007\275\022\271\024\205\031\215\047" +
    "\264\053\204\054\042\062\112\066\272\071\277\074\157" +
    "\102\136\114\u018f\116\u0102\120\u0156\122\163\001\001\000" +
    "\044\004\166\007\275\022\271\024\205\031\215\047\264" +
    "\053\204\054\042\062\112\066\272\071\277\074\157\102" +
    "\136\114\u018e\116\u0102\120\u0156\122\163\001\001\000\044" +
    "\004\166\007\275\022\271\024\205\031\215\047\264\053" +
    "\204\054\042\062\112\066\272\071\277\074\157\102\136" +
    "\114\u018d\116\u0102\120\u0156\122\163\001\001\000\044\004" +
    "\166\007\275\022\271\024\205\031\215\047\264\053\204" +
    "\054\042\062\112\066\272\071\277\074\157\102\136\114" +
    "\u018c\116\u0102\120\u0156\122\163\001\001\000\044\004\166" +
    "\007\275\022\271\024\205\031\215\047\264\053\204\054" +
    "\042\062\112\066\272\071\277\074\157\102\136\114\u018b" +
    "\116\u0102\120\u0156\122\163\001\001\000\044\004\166\007" +
    "\275\022\271\024\205\031\215\047\264\053\204\054\042" +
    "\062\112\066\272\071\277\074\157\102\136\114\u018a\116" +
    "\u0102\120\u0156\122\163\001\001\000\044\004\166\007\275" +
    "\022\271\024\205\031\215\047\264\053\204\054\042\062" +
    "\112\066\272\071\277\074\157\102\136\114\u0189\116\u0102" +
    "\120\u0156\122\163\001\001\000\044\004\166\007\275\022" +
    "\271\024\205\031\215\047\264\053\204\054\042\062\112" +
    "\066\272\071\277\074\157\102\136\114\u0188\116\u0102\120" +
    "\u0156\122\163\001\001\000\044\004\166\007\275\022\271" +
    "\024\205\031\215\047\264\053\204\054\042\062\112\066" +
    "\272\071\277\074\157\102\136\114\u0187\116\u0102\120\u0156" +
    "\122\163\001\001\000\044\004\166\007\275\022\271\024" +
    "\205\031\215\047\264\053\204\054\042\062\112\066\272" +
    "\071\277\074\157\102\136\114\u0186\116\u0102\120\u0156\122" +
    "\163\001\001\000\044\004\166\007\275\022\271\024\205" +
    "\031\215\047\264\053\204\054\042\062\112\066\272\071" +
    "\277\074\157\102\136\114\u0185\116\u0102\120\u0156\122\163" +
    "\001\001\000\044\004\166\007\275\022\271\024\205\031" +
    "\215\047\264\053\204\054\042\062\112\066\272\071\277" +
    "\074\157\102\136\114\u0184\116\u0102\120\u0156\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\250\034\u0198\001\001\000\002\001\001\000\144" +
    "\002\107\003\106\004\166\005\105\006\133\007\132\010" +
    "\143\011\142\021\111\022\110\023\206\024\205\025\156" +
    "\026\155\030\232\031\215\035\u019a\036\234\040\104\041" +
    "\103\042\213\043\212\044\223\045\222\046\200\047\176" +
    "\053\204\054\042\057\123\060\122\061\114\062\112\063" +
    "\146\064\145\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\141\114\140\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\u0153\004\166\005\u019e\007" +
    "\275\011\u0152\022\271\024\205\026\u019d\031\215\041\103" +
    "\043\212\045\222\047\264\053\204\054\042\060\122\062" +
    "\112\066\272\071\277\074\157\102\136\114\u0151\116\u0102" +
    "\120\u0156\122\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\u0153\004\166\007\275\011\u0152\022\271" +
    "\024\205\031\215\041\u0154\043\212\045\222\047\264\053" +
    "\204\054\042\060\122\062\112\066\272\071\277\074\157" +
    "\102\136\114\u0151\116\u0102\120\u0156\122\163\001\001\000" +
    "\074\004\166\006\133\007\132\021\111\022\110\023\206" +
    "\024\205\031\215\046\200\047\176\053\204\054\042\061" +
    "\114\062\112\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\u01c3\114\u01c2\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\074\004\166" +
    "\006\133\007\132\021\111\022\110\023\206\024\205\031" +
    "\215\046\200\047\176\053\204\054\042\061\114\062\112" +
    "\065\117\066\115\070\131\071\130\073\160\074\157\102" +
    "\136\113\u01c1\114\u01c0\115\173\116\171\117\220\120\217" +
    "\121\164\122\163\001\001\000\074\004\166\006\133\007" +
    "\132\021\111\022\110\023\206\024\205\031\215\046\200" +
    "\047\176\053\204\054\042\061\114\062\112\065\117\066" +
    "\115\070\131\071\130\073\160\074\157\102\136\113\u01bf" +
    "\114\u01be\115\173\116\171\117\220\120\217\121\164\122" +
    "\163\001\001\000\074\004\166\006\133\007\132\021\111" +
    "\022\110\023\206\024\205\031\215\046\200\047\176\053" +
    "\204\054\042\061\114\062\112\065\117\066\115\070\131" +
    "\071\130\073\160\074\157\102\136\113\u01bd\114\u01bc\115" +
    "\173\116\171\117\220\120\217\121\164\122\163\001\001" +
    "\000\074\004\166\006\133\007\132\021\111\022\110\023" +
    "\206\024\205\031\215\046\200\047\176\053\204\054\042" +
    "\061\114\062\112\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\u01bb\114\u01ba\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\074\004" +
    "\166\006\133\007\132\021\111\022\110\023\206\024\205" +
    "\031\215\046\200\047\176\053\204\054\042\061\114\062" +
    "\112\065\117\066\115\070\131\071\130\073\160\074\157" +
    "\102\136\113\u01b9\114\u01b8\115\173\116\171\117\220\120" +
    "\217\121\164\122\163\001\001\000\074\004\166\006\133" +
    "\007\132\021\111\022\110\023\206\024\205\031\215\046" +
    "\200\047\176\053\204\054\042\061\114\062\112\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\113" +
    "\u01b7\114\u01b6\115\173\116\171\117\220\120\217\121\164" +
    "\122\163\001\001\000\074\004\166\006\133\007\132\021" +
    "\111\022\110\023\206\024\205\031\215\046\200\047\176" +
    "\053\204\054\042\061\114\062\112\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\113\u01b5\114\u01b4" +
    "\115\173\116\171\117\220\120\217\121\164\122\163\001" +
    "\001\000\074\004\166\006\133\007\132\021\111\022\110" +
    "\023\206\024\205\031\215\046\200\047\176\053\204\054" +
    "\042\061\114\062\112\065\117\066\115\070\131\071\130" +
    "\073\160\074\157\102\136\113\u01b3\114\u01b2\115\173\116" +
    "\171\117\220\120\217\121\164\122\163\001\001\000\074" +
    "\004\166\006\133\007\132\021\111\022\110\023\206\024" +
    "\205\031\215\046\200\047\176\053\204\054\042\061\114" +
    "\062\112\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\u01b1\114\u01b0\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\074\004\166\006" +
    "\133\007\132\021\111\022\110\023\206\024\205\031\215" +
    "\046\200\047\176\053\204\054\042\061\114\062\112\065" +
    "\117\066\115\070\131\071\130\073\160\074\157\102\136" +
    "\113\u01af\114\u01ae\115\173\116\171\117\220\120\217\121" +
    "\164\122\163\001\001\000\074\004\166\006\133\007\132" +
    "\021\111\022\110\023\206\024\205\031\215\046\200\047" +
    "\176\053\204\054\042\061\114\062\112\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\u01ad\114" +
    "\u01ac\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\166\005\u01c9\031\215\053\204\054\042\102\136\122\313" +
    "\001\001\000\002\001\001\000\024\004\166\005\u01cb\007" +
    "\304\024\205\031\215\053\204\054\042\102\136\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\066\054\042\055\u01f1\001\001\000\010" +
    "\053\066\054\042\055\u01ec\001\001\000\002\001\001\000" +
    "\006\031\250\034\u01e3\001\001\000\010\053\066\054\042" +
    "\055\u01dd\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\053\066\054\042\055\u01d7\001\001\000\010\053\066" +
    "\054\042\055\u01d8\001\001\000\002\001\001\000\002\001" +
    "\001\000\140\002\107\003\106\004\166\005\105\006\133" +
    "\007\132\010\143\011\142\021\111\022\110\023\206\024" +
    "\205\025\156\026\155\030\u01da\031\215\040\104\041\103" +
    "\042\213\043\212\044\223\045\222\046\200\047\176\053" +
    "\204\054\042\057\123\060\122\061\114\062\112\063\146" +
    "\064\145\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\141\114\140\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\002\001\001\000" +
    "\140\002\107\003\106\004\166\005\105\006\133\007\132" +
    "\010\143\011\142\021\111\022\110\023\206\024\205\025" +
    "\156\026\155\030\u01dc\031\215\040\104\041\103\042\213" +
    "\043\212\044\223\045\222\046\200\047\176\053\204\054" +
    "\042\057\123\060\122\061\114\062\112\063\146\064\145" +
    "\065\117\066\115\070\131\071\130\073\160\074\157\102" +
    "\136\113\141\114\140\115\173\116\171\117\220\120\217" +
    "\121\164\122\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\140\002\107\003\106\004\166\005\105\006\133" +
    "\007\132\010\143\011\142\021\111\022\110\023\206\024" +
    "\205\025\156\026\155\030\u01df\031\215\040\104\041\103" +
    "\042\213\043\212\044\223\045\222\046\200\047\176\053" +
    "\204\054\042\057\123\060\122\061\114\062\112\063\146" +
    "\064\145\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\141\114\140\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\002\001\001\000" +
    "\140\002\107\003\106\004\166\005\105\006\133\007\132" +
    "\010\143\011\142\021\111\022\110\023\206\024\205\025" +
    "\156\026\155\030\u01e1\031\215\040\104\041\103\042\213" +
    "\043\212\044\223\045\222\046\200\047\176\053\204\054" +
    "\042\057\123\060\122\061\114\062\112\063\146\064\145" +
    "\065\117\066\115\070\131\071\130\073\160\074\157\102" +
    "\136\113\141\114\140\115\173\116\171\117\220\120\217" +
    "\121\164\122\163\001\001\000\002\001\001\000\012\014" +
    "\u01e7\053\066\054\042\055\u01d0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\066\054" +
    "\042\055\u01dd\001\001\000\002\001\001\000\140\002\107" +
    "\003\106\004\166\005\105\006\133\007\132\010\143\011" +
    "\142\021\111\022\110\023\206\024\205\025\156\026\155" +
    "\030\u01e9\031\215\040\104\041\103\042\213\043\212\044" +
    "\223\045\222\046\200\047\176\053\204\054\042\057\123" +
    "\060\122\061\114\062\112\063\146\064\145\065\117\066" +
    "\115\070\131\071\130\073\160\074\157\102\136\113\141" +
    "\114\140\115\173\116\171\117\220\120\217\121\164\122" +
    "\163\001\001\000\002\001\001\000\140\002\107\003\106" +
    "\004\166\005\105\006\133\007\132\010\143\011\142\021" +
    "\111\022\110\023\206\024\205\025\156\026\155\030\u01eb" +
    "\031\215\040\104\041\103\042\213\043\212\044\223\045" +
    "\222\046\200\047\176\053\204\054\042\057\123\060\122" +
    "\061\114\062\112\063\146\064\145\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\113\141\114\140" +
    "\115\173\116\171\117\220\120\217\121\164\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\107" +
    "\003\106\004\166\005\105\006\133\007\132\010\143\011" +
    "\142\021\111\022\110\023\206\024\205\025\156\026\155" +
    "\030\u01ee\031\215\040\104\041\103\042\213\043\212\044" +
    "\223\045\222\046\200\047\176\053\204\054\042\057\123" +
    "\060\122\061\114\062\112\063\146\064\145\065\117\066" +
    "\115\070\131\071\130\073\160\074\157\102\136\113\141" +
    "\114\140\115\173\116\171\117\220\120\217\121\164\122" +
    "\163\001\001\000\002\001\001\000\140\002\107\003\106" +
    "\004\166\005\105\006\133\007\132\010\143\011\142\021" +
    "\111\022\110\023\206\024\205\025\156\026\155\030\u01f0" +
    "\031\215\040\104\041\103\042\213\043\212\044\223\045" +
    "\222\046\200\047\176\053\204\054\042\057\123\060\122" +
    "\061\114\062\112\063\146\064\145\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\113\141\114\140" +
    "\115\173\116\171\117\220\120\217\121\164\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\107" +
    "\003\106\004\166\005\105\006\133\007\132\010\143\011" +
    "\142\021\111\022\110\023\206\024\205\025\156\026\155" +
    "\030\u01f3\031\215\040\104\041\103\042\213\043\212\044" +
    "\223\045\222\046\200\047\176\053\204\054\042\057\123" +
    "\060\122\061\114\062\112\063\146\064\145\065\117\066" +
    "\115\070\131\071\130\073\160\074\157\102\136\113\141" +
    "\114\140\115\173\116\171\117\220\120\217\121\164\122" +
    "\163\001\001\000\002\001\001\000\140\002\107\003\106" +
    "\004\166\005\105\006\133\007\132\010\143\011\142\021" +
    "\111\022\110\023\206\024\205\025\156\026\155\030\u01f5" +
    "\031\215\040\104\041\103\042\213\043\212\044\223\045" +
    "\222\046\200\047\176\053\204\054\042\057\123\060\122" +
    "\061\114\062\112\063\146\064\145\065\117\066\115\070" +
    "\131\071\130\073\160\074\157\102\136\113\141\114\140" +
    "\115\173\116\171\117\220\120\217\121\164\122\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\166\005" +
    "\u01fb\007\275\022\271\024\205\031\215\047\335\053\204" +
    "\054\042\071\277\074\157\102\136\122\163\001\001\000" +
    "\002\001\001\000\006\031\250\034\u01fd\001\001\000\002" +
    "\001\001\000\026\004\166\005\u0201\007\275\024\205\031" +
    "\215\053\204\054\042\071\363\102\136\122\163\001\001" +
    "\000\032\004\166\005\u0200\007\275\022\271\024\205\031" +
    "\215\053\204\054\042\071\277\074\362\102\136\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\126\002" +
    "\107\003\106\004\166\005\u0206\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\031\215\040" +
    "\u0205\041\u0173\042\213\043\u0207\044\223\045\222\046\200" +
    "\047\176\053\204\054\042\057\123\060\122\061\114\062" +
    "\112\065\117\066\115\070\131\071\130\073\160\074\157" +
    "\102\136\113\141\114\140\115\173\116\171\117\220\120" +
    "\217\121\164\122\163\001\001\000\052\004\166\005\u0204" +
    "\007\275\011\u0152\022\271\024\205\031\215\047\264\053" +
    "\204\054\042\060\u0172\062\112\066\272\071\277\074\157" +
    "\102\136\114\u0151\116\u0102\120\u0156\122\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\122\002\107\003\106\004\166\005\u0209\006" +
    "\133\007\132\010\143\011\142\021\111\022\110\023\206" +
    "\024\205\031\215\042\u020a\043\u0177\044\u020b\045\u0176\046" +
    "\200\047\176\053\204\054\042\057\123\060\122\061\114" +
    "\062\112\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\141\114\140\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\107\003\106\004\166\005\105\006" +
    "\133\007\132\010\143\011\142\021\111\022\110\023\206" +
    "\024\205\025\156\026\155\030\u020f\031\215\040\104\041" +
    "\103\042\213\043\212\044\223\045\222\046\200\047\176" +
    "\053\204\054\042\057\123\060\122\061\114\062\112\063" +
    "\146\064\145\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\141\114\140\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\140\002\107\003" +
    "\106\004\166\005\105\006\133\007\132\010\143\011\142" +
    "\021\111\022\110\023\206\024\205\025\156\026\155\030" +
    "\u0213\031\215\040\104\041\103\042\213\043\212\044\223" +
    "\045\222\046\200\047\176\053\204\054\042\057\123\060" +
    "\122\061\114\062\112\063\146\064\145\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\141\114" +
    "\140\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\140\002\107\003\106\004" +
    "\166\005\105\006\133\007\132\010\143\011\142\021\111" +
    "\022\110\023\206\024\205\025\156\026\155\030\u0215\031" +
    "\215\040\104\041\103\042\213\043\212\044\223\045\222" +
    "\046\200\047\176\053\204\054\042\057\123\060\122\061" +
    "\114\062\112\063\146\064\145\065\117\066\115\070\131" +
    "\071\130\073\160\074\157\102\136\113\141\114\140\115" +
    "\173\116\171\117\220\120\217\121\164\122\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\140\002\107\003" +
    "\106\004\166\005\105\006\133\007\132\010\143\011\142" +
    "\021\111\022\110\023\206\024\205\025\156\026\155\030" +
    "\u0218\031\215\040\104\041\103\042\213\043\212\044\223" +
    "\045\222\046\200\047\176\053\204\054\042\057\123\060" +
    "\122\061\114\062\112\063\146\064\145\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\141\114" +
    "\140\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\004\031\u0219\001\001\000\002\001\001\000" +
    "\002\001\001\000\140\002\107\003\106\004\166\005\105" +
    "\006\133\007\132\010\143\011\142\021\111\022\110\023" +
    "\206\024\205\025\156\026\155\030\u021c\031\215\040\104" +
    "\041\103\042\213\043\212\044\223\045\222\046\200\047" +
    "\176\053\204\054\042\057\123\060\122\061\114\062\112" +
    "\063\146\064\145\065\117\066\115\070\131\071\130\073" +
    "\160\074\157\102\136\113\141\114\140\115\173\116\171" +
    "\117\220\120\217\121\164\122\163\001\001\000\002\001" +
    "\001\000\140\002\107\003\106\004\166\005\105\006\133" +
    "\007\132\010\143\011\142\021\111\022\110\023\206\024" +
    "\205\025\156\026\155\030\u021e\031\215\040\104\041\103" +
    "\042\213\043\212\044\223\045\222\046\200\047\176\053" +
    "\204\054\042\057\123\060\122\061\114\062\112\063\146" +
    "\064\145\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\141\114\140\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\002\001\001\000" +
    "\016\014\070\015\067\017\u0220\053\066\054\042\055\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\025\156\026" +
    "\155\030\u0223\031\215\040\104\041\103\042\213\043\212" +
    "\044\223\045\222\046\200\047\176\053\204\054\042\057" +
    "\123\060\122\061\114\062\112\063\146\064\145\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\113" +
    "\141\114\140\115\173\116\171\117\220\120\217\121\164" +
    "\122\163\001\001\000\002\001\001\000\140\002\107\003" +
    "\106\004\166\005\105\006\133\007\132\010\143\011\142" +
    "\021\111\022\110\023\206\024\205\025\156\026\155\030" +
    "\u0225\031\215\040\104\041\103\042\213\043\212\044\223" +
    "\045\222\046\200\047\176\053\204\054\042\057\123\060" +
    "\122\061\114\062\112\063\146\064\145\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\141\114" +
    "\140\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\025\156\026" +
    "\155\030\u0228\031\215\040\104\041\103\042\213\043\212" +
    "\044\223\045\222\046\200\047\176\053\204\054\042\057" +
    "\123\060\122\061\114\062\112\063\146\064\145\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\113" +
    "\141\114\140\115\173\116\171\117\220\120\217\121\164" +
    "\122\163\001\001\000\002\001\001\000\140\002\107\003" +
    "\106\004\166\005\105\006\133\007\132\010\143\011\142" +
    "\021\111\022\110\023\206\024\205\025\156\026\155\030" +
    "\u022a\031\215\040\104\041\103\042\213\043\212\044\223" +
    "\045\222\046\200\047\176\053\204\054\042\057\123\060" +
    "\122\061\114\062\112\063\146\064\145\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\141\114" +
    "\140\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\025\156\026" +
    "\155\030\u022d\031\215\040\104\041\103\042\213\043\212" +
    "\044\223\045\222\046\200\047\176\053\204\054\042\057" +
    "\123\060\122\061\114\062\112\063\146\064\145\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\113" +
    "\141\114\140\115\173\116\171\117\220\120\217\121\164" +
    "\122\163\001\001\000\002\001\001\000\140\002\107\003" +
    "\106\004\166\005\105\006\133\007\132\010\143\011\142" +
    "\021\111\022\110\023\206\024\205\025\156\026\155\030" +
    "\u022f\031\215\040\104\041\103\042\213\043\212\044\223" +
    "\045\222\046\200\047\176\053\204\054\042\057\123\060" +
    "\122\061\114\062\112\063\146\064\145\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\141\114" +
    "\140\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\140\002\107\003\106\004\166\005\105\006\133" +
    "\007\132\010\143\011\142\021\111\022\110\023\206\024" +
    "\205\025\156\026\155\030\u0233\031\215\040\104\041\103" +
    "\042\213\043\212\044\223\045\222\046\200\047\176\053" +
    "\204\054\042\057\123\060\122\061\114\062\112\063\146" +
    "\064\145\065\117\066\115\070\131\071\130\073\160\074" +
    "\157\102\136\113\141\114\140\115\173\116\171\117\220" +
    "\120\217\121\164\122\163\001\001\000\004\031\u0234\001" +
    "\001\000\002\001\001\000\004\031\u0236\001\001\000\002" +
    "\001\001\000\140\002\107\003\106\004\166\005\105\006" +
    "\133\007\132\010\143\011\142\021\111\022\110\023\206" +
    "\024\205\025\156\026\155\030\u0244\031\215\040\104\041" +
    "\103\042\213\043\212\044\223\045\222\046\200\047\176" +
    "\053\204\054\042\057\123\060\122\061\114\062\112\063" +
    "\146\064\145\065\117\066\115\070\131\071\130\073\160" +
    "\074\157\102\136\113\141\114\140\115\173\116\171\117" +
    "\220\120\217\121\164\122\163\001\001\000\016\014\070" +
    "\015\067\017\u023f\053\066\054\042\055\071\001\001\000" +
    "\016\014\070\015\067\017\u023a\053\066\054\042\055\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\107\003\106\004\166\005\105\006\133\007\132\010\143" +
    "\011\142\021\111\022\110\023\206\024\205\025\156\026" +
    "\155\030\u023d\031\215\040\104\041\103\042\213\043\212" +
    "\044\223\045\222\046\200\047\176\053\204\054\042\057" +
    "\123\060\122\061\114\062\112\063\146\064\145\065\117" +
    "\066\115\070\131\071\130\073\160\074\157\102\136\113" +
    "\141\114\140\115\173\116\171\117\220\120\217\121\164" +
    "\122\163\001\001\000\004\031\u023e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\107" +
    "\003\106\004\166\005\105\006\133\007\132\010\143\011" +
    "\142\021\111\022\110\023\206\024\205\025\156\026\155" +
    "\030\u0242\031\215\040\104\041\103\042\213\043\212\044" +
    "\223\045\222\046\200\047\176\053\204\054\042\057\123" +
    "\060\122\061\114\062\112\063\146\064\145\065\117\066" +
    "\115\070\131\071\130\073\160\074\157\102\136\113\141" +
    "\114\140\115\173\116\171\117\220\120\217\121\164\122" +
    "\163\001\001\000\004\031\u0243\001\001\000\002\001\001" +
    "\000\004\031\u0245\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\u0251\054\042\001\001\000\014\053\204" +
    "\054\042\102\u024b\103\u024a\104\u0249\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\204" +
    "\054\042\102\u024d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\u0250\054\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u025f\001\001\000\002\001" +
    "\001\000\006\053\u0255\054\042\001\001\000\004\031\u0256" +
    "\001\001\000\002\001\001\000\016\014\070\015\067\017" +
    "\u025c\053\066\054\042\055\071\001\001\000\016\014\070" +
    "\015\067\017\u0259\053\066\054\042\055\071\001\001\000" +
    "\002\001\001\000\004\031\u025b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u025e\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\070\015\067\017\u0265" +
    "\053\066\054\042\055\071\001\001\000\016\014\070\015" +
    "\067\017\u0262\053\066\054\042\055\071\001\001\000\002" +
    "\001\001\000\004\031\u0264\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0267\001\001\000\002\001\001" +
    "\000\006\031\u026b\052\u026a\001\001\000\140\002\107\003" +
    "\106\004\166\005\105\006\133\007\132\010\143\011\142" +
    "\021\111\022\110\023\206\024\205\025\156\026\155\030" +
    "\u0278\031\215\040\104\041\103\042\213\043\212\044\223" +
    "\045\222\046\200\047\176\053\204\054\042\057\123\060" +
    "\122\061\114\062\112\063\146\064\145\065\117\066\115" +
    "\070\131\071\130\073\160\074\157\102\136\113\141\114" +
    "\140\115\173\116\171\117\220\120\217\121\164\122\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\066\054\042\055\u0274\001\001\000\010\053\066\054\042" +
    "\055\u026e\001\001\000\002\001\001\000\006\031\u026b\052" +
    "\u0270\001\001\000\002\001\001\000\006\031\u026b\052\u0272" +
    "\001\001\000\002\001\001\000\006\031\u026b\052\u0277\001" +
    "\001\000\002\001\001\000\006\031\u026b\052\u0276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\066\054\042\055\u027b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u027f\001\001\000\010\031\u0281\053\u0280\054\042" +
    "\001\001\000\012\031\u02a8\053\u02a7\054\042\075\u02a9\001" +
    "\001\000\004\075\u0282\001\001\000\004\027\u02a4\001\001" +
    "\000\010\110\u0285\111\u0288\112\u0286\001\001\000\002\001" +
    "\001\000\006\053\u0296\054\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\110\u0285\111\u0288\112\u0290\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\110\u0285\111\u0293\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\u02ad\001" +
    "\001\000\004\075\u02ab\001\001\000\004\027\u02aa\001\001" +
    "\000\002\001\001\000\004\027\u02ac\001\001\000\002\001" +
    "\001\000\004\027\u02ae\001\001\000\002\001\001\000\004" +
    "\077\u02b3\001\001\000\012\053\204\054\042\102\u02ba\105" +
    "\u02be\001\001\000\010\053\204\054\042\102\u02bd\001\001" +
    "\000\012\053\204\054\042\102\u02ba\105\u02b9\001\001\000" +
    "\002\001\001\000\016\014\070\015\067\017\u02b5\053\066" +
    "\054\042\055\071\001\001\000\002\001\001\000\006\031" +
    "\u02b8\032\u02b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\204\054" +
    "\042\102\u02bc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\u02c1\054" +
    "\042\056\u02c3\001\001\000\002\001\001\000\006\053\u02c9" +
    "\054\042\001\001\000\002\001\001\000\006\053\u02c6\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\u02c8\054\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u02d0" +
    "\001\001\000\004\031\u02cf\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\u02d6\053\u02d5" +
    "\054\042\075\u02d7\001\001\000\004\075\u02d3\001\001\000" +
    "\004\027\u02d4\001\001\000\002\001\001\000\004\075\u02db" +
    "\001\001\000\004\075\u02d9\001\001\000\004\027\u02d8\001" +
    "\001\000\002\001\001\000\004\027\u02da\001\001\000\002" +
    "\001\001\000\004\027\u02dc\001\001\000\002\001\001\000" +
    "\004\031\u02e1\001\001\000\004\031\u02e0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\u02ee\053\u02ec\054\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\u02e9\053\u02e7\054" +
    "\042\001\001\000\004\031\u02eb\001\001\000\004\031\u02ea" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u02f0\001\001\000\004\031\u02ef\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = AlloyCore.isDebug();
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");
    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.SOFT, "soft");
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
    ch.put(CompSym.MAXSOME, "maxsome");
    ch.put(CompSym.MAXSOME2, "maxsome");
    ch.put(CompSym.MINSOME, "minsome");
    ch.put(CompSym.MINSOME2, "minsome");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
    TreeSet<String> list = new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static final String INT_LIB_NAME = "util" + java.io.File.separator + "integer";
  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (!filename.endsWith(INT_LIB_NAME + ".als"))
            u.addOpen(null, null, ExprVar.make(null, INT_LIB_NAME), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = MarkdownHandler.strip(content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c) throws Err {
        if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
          Sig j=s.get(i).sig;  int k=s.get(i).startingScope;
          p=p.merge(j.pos);
          if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
          if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=k; s.remove(i); continue; }
          if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
        }
        if (n!=null)
          parser.alloymodule.addCommand(follow, p, n, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
        else
          parser.alloymodule.addCommand(follow, p, e, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // BaseExpr ::= LBRACE Declz RBRACE 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // BaseExpr ::= Super 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // BaseExpr ::= SigRef 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // BaseExpr ::= INTNEXT 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // BaseExpr ::= INTMAX 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // BaseExpr ::= INTMIN 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "this");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "iden");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // BaseExpr ::= STR 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // UnopExprB ::= CARET UnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // UnopExprB ::= STAR UnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // UnopExprB ::= TILDE UnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // UnopExprB ::= BaseExpr 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // UnopExprA ::= CARET UnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // UnopExprA ::= STAR UnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // UnopExprA ::= TILDE UnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // UnopExprA ::= CARET Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // UnopExprA ::= STAR Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // UnopExprA ::= TILDE Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // DotExprB ::= BracketExprB DOT SUM 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // DotExprB ::= BracketExprB DOT INT 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // DotExprB ::= BracketExprB DOT DISJ 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // DotExprB ::= UnopExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // DotExprA ::= BracketExprB DOT Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // DotExprA ::= UnopExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // BracketExprB ::= DotExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // BracketExprA ::= DotExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // RangeExprB ::= BracketExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // RangeExprA ::= RangeExprB RANGE Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // RangeExprA ::= BracketExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // DomainExprB ::= RangeExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // DomainExprA ::= RangeExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // RelationExprB ::= DomainExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // RelationExprA ::= DomainExprB RelOp Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // RelationExprA ::= DomainExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // RelOp ::= LONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // RelOp ::= LONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // RelOp ::= LONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // RelOp ::= LONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // RelOp ::= ONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // RelOp ::= ONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // RelOp ::= ONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // RelOp ::= ONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // RelOp ::= SOME_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // RelOp ::= SOME_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // RelOp ::= SOME_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // RelOp ::= SOME_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // RelOp ::= ANY_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // RelOp ::= ANY_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // RelOp ::= ANY_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // RelOp ::= ARROW 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // IntersectExprB ::= RelationExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // IntersectExprA ::= RelationExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // OverrideExprB ::= IntersectExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // OverrideExprA ::= IntersectExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // NumUnopExprB ::= INT NumUnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NumUnopExprB ::= SUM NumUnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NumUnopExprB ::= HASH NumUnopExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NumUnopExprB ::= OverrideExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NumUnopExprA ::= INT NumUnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NumUnopExprA ::= SUM NumUnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NumUnopExprA ::= HASH NumUnopExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NumUnopExprA ::= INT Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NumUnopExprA ::= SUM Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NumUnopExprA ::= HASH Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NumUnopExprA ::= OverrideExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // MulExprB ::= NumUnopExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // MulExprA ::= MulExprB INTREM Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // MulExprA ::= MulExprB INTDIV Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // MulExprA ::= MulExprB INTMUL Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // MulExprA ::= NumUnopExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // UnionDiffExprB ::= MulExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // UnionDiffExprA ::= MulExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ShiftExprB ::= UnionDiffExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ShiftExprA ::= UnionDiffExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CompareExprB ::= ShiftExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CompareExprB ::= SEQ ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CompareExprB ::= SET ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CompareExprB ::= ONE ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CompareExprB ::= LONE ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CompareExprB ::= MINSOME LBRACKET NUMBER RBRACKET ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MINSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CompareExprB ::= MINSOME ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MINSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CompareExprB ::= MAXSOME LBRACKET NUMBER RBRACKET ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MAXSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CompareExprB ::= MAXSOME ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MAXSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CompareExprB ::= SOME ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CompareExprB ::= NO ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CompareExprB ::= ALL ShiftExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CompareExprA ::= ShiftExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CompareExprA ::= SEQ ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CompareExprA ::= SET ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CompareExprA ::= ONE ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CompareExprA ::= LONE ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CompareExprA ::= MINSOME LBRACKET NUMBER RBRACKET ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MINSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CompareExprA ::= MINSOME ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MINSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CompareExprA ::= MAXSOME LBRACKET NUMBER RBRACKET ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MAXSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CompareExprA ::= MAXSOME ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.MAXSOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CompareExprA ::= SOME ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CompareExprA ::= NO ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CompareExprA ::= ALL ShiftExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NegExprB ::= NOT NegExprB 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NegExprB ::= CompareExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NegExprA ::= NOT NegExprA 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NegExprA ::= NOT Bind 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NegExprA ::= CompareExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AndExprB ::= AndExprB AND NegExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AndExprB ::= NegExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AndExprA ::= AndExprB AND Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AndExprA ::= NegExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ImpliesExprCloseB ::= AndExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ImpliesExprB ::= ImpliesExprOpenB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ImpliesExprB ::= ImpliesExprCloseB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ImpliesExprCloseA ::= AndExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ImpliesExprA ::= ImpliesExprOpenA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ImpliesExprA ::= ImpliesExprCloseA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EquivExprB ::= ImpliesExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EquivExprA ::= EquivExprB IFF Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EquivExprA ::= ImpliesExprA 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OrExprB ::= OrExprB OR EquivExprB 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OrExprB ::= EquivExprB 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OrExprA ::= OrExprB OR Bind 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OrExprA ::= EquivExprA 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Bind ::= SUM2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SUM .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Bind ::= ONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ONE .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Bind ::= LONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.LONE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Bind ::= MINSOME2 LBRACKET NUMBER RBRACKET Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.MINSOME.make(o, null, a, b, p.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Bind ::= MINSOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.MINSOME.make(o, null, a, b, 0); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Bind ::= MAXSOME2 LBRACKET NUMBER RBRACKET Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.MAXSOME.make(o, null, a, b, p.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Bind ::= MAXSOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.MAXSOME.make(o, null, a, b, 0); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Bind ::= SOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Bind ::= NO2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Bind ::= ALL2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Bind ::= LET Let 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Expr ::= Bind 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Expr ::= OrExprB 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Expr ::= OrExprA 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SuperOrBar ::= Super 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SuperOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SuperP ::= SuperP Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SuperP ::= Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Super ::= LBRACE RBRACE 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Super ::= LBRACE SuperP RBRACE 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SuperOpt ::= Super 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SuperOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Let ::= Name EQUALS Expr COMMA Let 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Let ::= Name EQUALS Expr SuperOrBar 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Decls ::= COMMA Decls 
            {
              List<Decl> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Decls ::= Declb COMMA Decls 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y; RESULT.add(0,x);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Decls ::= Declb 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Decls ::= 
            {
              List<Decl> RESULT =null;
		 RESULT=new ArrayList<Decl>();                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Declp ::= Declb 
            {
              List<Decl> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Declp ::= Declp COMMA Declb 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Declz ::= Decla 
            {
              List<Decl> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Declz ::= Declz COMMA Decla 
            {
              List<Decl> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Declb ::= Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Declb ::= PART Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Declb ::= Names EQUALS Expr 
            {
              Decl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Declb ::= PRIVATE Names EQUALS Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Declb ::= DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Declb ::= EXH Names EQUALS Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Declb ::= PART Names EQUALS Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Declb ::= Decla 
            {
              Decl RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Decla ::= Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Decla ::= DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Decla ::= EXH Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Decla ::= PART Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Decla ::= Names COLON Expr 
            {
              Decl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Decla ::= PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Decla ::= DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Decla ::= EXH Names COLON Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Decla ::= PART Names COLON Expr 
            {
              Decl RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Namex ::= Namex COMMA EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Namex ::= Namex COMMA Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b);              a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Namex ::= EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(null); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Namex ::= Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>();                   RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Names ::= Names COMMA Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Names ::= Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NameHelper ::= ID 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Name ::= SEQ SLASH NameHelper 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Name ::= THIS SLASH NameHelper 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Name ::= NameHelper 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SigRefu ::= SigRefu PLUS SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SigRefu ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SigRefp ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SigRefs ::= SigRefp 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SigRefs ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=new ArrayList<ExprVar>(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SigRef ::= NONE 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "none");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SigRef ::= SEQ SLASH SIGINT 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SigRef ::= SIGINT 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Int");               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SigRef ::= STRING 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "String");            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SigRef ::= UNIV 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "univ");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SigRef ::= Name 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SigIn ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=null;                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SigIn ::= EQUALS SigRefu 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SigIn ::= IN SigRefu 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SigIn ::= EXTENDS SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SigQuals ::= SigQual SigQuals 
            {
              List<Pos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SigQuals ::= SIG 
            {
              List<Pos> RESULT =null;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SigQual ::= PRIVATE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SigQual ::= SOME 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SigQual ::= ONE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SigQual ::= LONE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SigQual ::= ABSTRACT 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   for(ExprVar bb:b) {
      parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)));
   }
 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Vis ::= PRIVATE 
            {
              Pos RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=p;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Vis ::= 
            {
              Pos RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Predicate ::= Vis PRED Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Function ::= Vis FUN Name COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MacroBody ::= EQUALS Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MacroBody ::= Super 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Macro ::= Vis LET Name MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TypeNumber ::= NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TypeNumber ::= NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TypeNumber ::= EXACTLY NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Typescope ::= TypeNumber NONE 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Typescope ::= TypeNumber STRING 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Typescope ::= TypeNumber UNIV 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Typescope ::= TypeNumber SEQ 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Typescope ::= TypeNumber INT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Typescope ::= TypeNumber SIGINT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Typescope ::= TypeNumber Name 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Typescopes ::= Typescope 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Scope ::= 
            {
              List<CommandScope> RESULT =null;
		 RESULT=new ArrayList<CommandScope>();                                                                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Scope ::= FOR Typescopes 
            {
              List<CommandScope> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Scope ::= FOR NUMBER BUT Typescopes 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Scope ::= FOR NUMBER 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expects ::= EXPECT NUMBER 
            {
              ExprConstant RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expects ::= 
            {
              ExprConstant RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Command ::= Command IMPLIES CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Command ::= Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Command ::= CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Command ::= CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Command ::= Command IMPLIES CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Command ::= Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Command ::= CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Command ::= CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CommandPrefix ::= RUN 
            {
              ExprVar RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(r, "r"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CommandPrefix ::= CHECK 
            {
              ExprVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(c, "c"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Spec ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Spec ::= Spec Command 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Spec ::= Spec Macro 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Spec ::= Spec Predicate 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Spec ::= Spec Function 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Spec ::= Spec Sig 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Spec ::= Spec ASSERT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Spec ::= Spec ASSERT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Spec ::= Spec ASSERT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Spec ::= Spec FACT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Spec ::= Spec FACT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Spec ::= Spec FACT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Spec ::= Spec SOFT LBRACKET NUMBER RBRACKET FACT STR Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addSoftFact  (o , n.string , e , p.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Spec ::= Spec SOFT LBRACKET NUMBER RBRACKET FACT Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addSoftFact  (o , n.label  , e , p.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= Spec SOFT LBRACKET NUMBER RBRACKET FACT Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant p = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addSoftFact  (o , ""       , e , p.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec SOFT FACT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addSoftFact  (o , n.string , e , 0); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec SOFT FACT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addSoftFact  (o , n.label  , e , 0); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec SOFT FACT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addSoftFact  (o , ""       , e , 0); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec Vis OPEN Name AS Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec Vis OPEN Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
              Object RESULT =null;
		 parser.alloymodule.doneParsing(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

